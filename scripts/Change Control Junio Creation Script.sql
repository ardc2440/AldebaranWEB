USE Aldebaran
GO

IF EXISTS (SELECT 1 FROM sys.columns WHERE Name = 'PURCHASE_ORDER_VARIATION' AND object_id = OBJECT_ID('ITEM_REFERENCES')) 
	ALTER TABLE [item_references] DROP COLUMN PURCHASE_ORDER_VARIATION 
GO

ALTER TABLE [item_references] ADD PURCHASE_ORDER_VARIATION INT NOT NULL CONSTRAINT DF_PURCHASE_ORDER_VARIATION DEFAULT 0
GO

CREATE OR ALTER PROCEDURE SP_IS_VALID_PURCHASE_ORDER_VARIATION
	@PROVIDER_ID INT, 
	@REFERENCE_ID INT, 
	@QUANTITY INT, 
	@VARIATIONMONTHNUMBER INT,
	@PURCHASE_ORDER_ID INT = -1 
AS
BEGIN 
	DECLARE @Variation INT = 0
	DECLARE @Average INT = 0
	DECLARE @Is_Valid_Variation bit = 1   

	SELECT @Variation = PURCHASE_ORDER_VARIATION 
	  FROM item_references 
	 WHERE REFERENCE_ID = @REFERENCE_ID
	
	/*No tiene configurada validacion de orden de compra*/
	if @Variation > 0 
	BEGIN	
		/* Validar si el proveedor tiene ordenes con la misma referencia */
		SELECT @Average = AVG(a.REQUESTED_QUANTITY) FROM purchase_order_details a 
		  JOIN purchase_orders b on b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
		  JOIN status_document_types c on c.STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID 
									  AND c.STATUS_ORDER IN (1,2)	
		 WHERE a.PURCHASE_ORDER_ID <> @PURCHASE_ORDER_ID
		   AND a.REFERENCE_ID = @REFERENCE_ID
		   AND b.PROVIDER_ID = @PROVIDER_ID
		   AND b.REQUEST_DATE >= DATEADD(MONTH,-@VARIATIONMONTHNUMBER,GETDATE())
		   			
		IF NOT(@QUANTITY BETWEEN FLOOR(@Average - (@Average*@Variation)/100) AND FLOOR(@Average + (@Average*@Variation)/100))
			SET @Is_Valid_Variation = 0
	END 

	SELECT @Is_Valid_Variation IS_VALID_VARIATION, @Average AVERAGE, FLOOR(@Average - (@Average*@Variation)/100) MINIMUM_RANGE, FLOOR(@Average + (@Average*@Variation)/100) MAXIMUM_RANGE
END 
GO

CREATE OR ALTER PROCEDURE SP_GET_NOTFICATIONS_WITH_SEND_ERROR
	@SEARCHKEY VARCHAR(MAX) = NULL
AS
BEGIN
	DECLARE @Notifications TABLE (
		EMAIL_TYPE SMALLINT,
		EMAIL_ID INT,
		Description VARCHAR(MAX), 
		CUSTOMER_NAME VARCHAR(50),
		Reason VARCHAR(100),	
		NOTIFIED_MAIL_LIST	VARCHAR(MAX),
		NOTIFICATION_DATE DATETIME,
		NOTIFICATION_SENDING_ERROR_MESSAGE VARCHAR(MAX))

	INSERT INTO @Notifications
		SELECT 0, a.PURCHASE_ORDER_NOTIFICATION_ID, 'Notificaci贸n para el pedido no. '+d.ORDER_NUMBER+' del '+CONVERT(varchar,d.ORDER_DATE,3) + ' por modificaci贸n de la orden de compra No. '+
			   c.ORDER_NUMBER Description, f.CUSTOMER_NAME, e.MODIFICATION_REASON_NAME Reason, a.NOTIFIED_MAIL_LIST, a.NOTIFICATION_DATE, a.NOTIFICATION_SENDING_ERROR_MESSAGE
		  FROM purchase_order_notifications a 
		  JOIN modified_purchase_orders b ON b.MODIFIED_PURCHASE_ORDER_ID = a.MODIFIED_PURCHASE_ORDER_ID
		  JOIN purchase_orders c ON c.PURCHASE_ORDER_ID = b.PURCHASE_ORDER_ID
		  JOIN customer_orders d ON d.CUSTOMER_ORDER_ID = a.CUSTOMER_ORDER_ID  
		  JOIN modification_reasons e ON e.MODIFICATION_REASON_ID = b.MODIFICATION_REASON_ID
		  JOIN customers f ON f.CUSTOMER_ID = d.CUSTOMER_ID
		 WHERE NOTIFICATION_STATE = -1
		UNION 
		SELECT 1, a.CUSTOMER_ORDER_NOTIFICATION_ID, 'Notificaci贸n para el pedido no. '+b.ORDER_NUMBER+' del '+CONVERT(varchar,b.ORDER_DATE,3) Description, 
			   c.CUSTOMER_NAME, d.SUBJECT Reason, a.NOTIFIED_MAIL_LIST, a.NOTIFICATION_DATE, a.NOTIFICATION_SENDING_ERROR_MESSAGE
		  FROM customer_order_notifications a
		  JOIN customer_orders b ON b.CUSTOMER_ORDER_ID = a.CUSTOMER_ORDER_ID
		  JOIN customers c ON c.CUSTOMER_ID = b.CUSTOMER_ID
		  JOIN notification_templates d ON d.NOTIFICATION_TEMPLATE_ID = a.NOTIFICATION_TEMPLATE_ID
		 WHERE NOTIFICATION_STATE = -1
		UNION
		SELECT 2, a.CUSTOMER_RESERVATION_NOTIFICATION_ID, 'Notificaci贸n para la reserva no. '+b.RESERVATION_NUMBER+' del '+CONVERT(varchar,b.RESERVATION_DATE,3) Description, 
			   c.CUSTOMER_NAME, d.SUBJECT Reason, a.NOTIFIED_MAIL_LIST, a.NOTIFICATION_DATE, a.NOTIFICATION_SENDING_ERROR_MESSAGE
		  FROM customer_reservation_notifications a
		  JOIN customer_reservations b ON b.CUSTOMER_RESERVATION_ID = a.CUSTOMER_RESERVATION_ID
		  JOIN customers c ON c.CUSTOMER_ID = b.CUSTOMER_ID
		  JOIN notification_templates d ON d.NOTIFICATION_TEMPLATE_ID = a.NOTIFICATION_TEMPLATE_ID
		 WHERE NOTIFICATION_STATE = -1

	SELECT * 
	  FROM @Notifications
	 WHERE @SearchKey IS NULL 
	    OR Description LIKE '%'+@SearchKey+'%' 
		OR CUSTOMER_NAME LIKE '%'+@SearchKey+'%' 
		OR Reason LIKE '%'+@SearchKey+'%' 
		OR NOTIFIED_MAIL_LIST LIKE '%'+@SearchKey+'%' 
		OR CONVERT(VARCHAR, NOTIFICATION_DATE, 3) LIKE '%'+@SearchKey+'%' 
		OR NOTIFICATION_SENDING_ERROR_MESSAGE LIKE '%'+@SearchKey+'%' 
 
END 
GO
USE Aldebaran
GO

CREATE OR ALTER PROCEDURE SP_CUSTOMER_ORDERS_AFFECTED_BY_PURCHASE_ORDER_UPDATE
	@PURCHASEORDERID INT,
	@NEWEXPECTEDRECIPDATE DATE,
	@PURCHASEORDERDETAILQUANTITIES VARCHAR(MAX)
AS
BEGIN 

	/* RETURN DATA TABLE */
	DECLARE @CUSTOMERORDERNOTIFICATED TABLE
		(CUSTOMERORDERID INT NOT NULL PRIMARY KEY, 
		 ORDERNUMBER VARCHAR(10) NOT NULL,
		 CUSTOMERNAME VARCHAR(50), 
		 ORDERDATE DATE, 
		 ESTIMATEDDELIVERYDATE DATE,
		 STATUS_DOCUMENT_TYPE_NAME VARCHAR(30))
		 
	DECLARE @CUSTOMERORDERAFFECTED TABLE (CUSTOMERORDERID INT NOT NULL)

	/* GET THE ACTUAL EXPECTED_RECEIPT_DATE */
	DECLARE @EXPECTED_RECEIPT_DATE DATE 
	
	SELECT @EXPECTED_RECEIPT_DATE = EXPECTED_RECEIPT_DATE 
	  FROM PURCHASE_ORDERS 
	 WHERE PURCHASE_ORDER_ID = @PURCHASEORDERID

	/* SEND THE LIST OF UPDATED REFERENCES IN THE APPLICATION TO THE WORK TABLE */
	DECLARE @PURCHASEORDERDETAIL_PREV TABLE (IDREG INT NOT NULL IDENTITY(1,1), DETAIL VARCHAR(MAX))
	DECLARE @PURCHASEORDERDETAIL TABLE (REFERENCEID INT NOT NULL, QUANTITY INT)	
	DECLARE @REGISTER VARCHAR(MAX)
	DECLARE @REFERENCEID VARCHAR(10)
	DECLARE @QUANTITY VARCHAR(10)
	DECLARE @MAXREG INT = 0;
	DECLARE @IDREG INT = 0;

	INSERT INTO @PURCHASEORDERDETAIL_PREV (DETAIL)
		 SELECT VALUE FROM STRING_SPLIT(@PURCHASEORDERDETAILQUANTITIES,';')

	SELECT @MAXREG= MAX(IDREG), @IDREG = MIN(IDREG) FROM @PURCHASEORDERDETAIL_PREV
	
	WHILE @IDREG <= @MAXREG
	BEGIN
		SET @REGISTER = '';
		SET @REFERENCEID = 0;
		SET @QUANTITY = 0;

		SELECT @REGISTER = DETAIL 
		  FROM @PURCHASEORDERDETAIL_PREV 
		 WHERE IDREG = @IDREG


		 SET @REFERENCEID = SUBSTRING(@REGISTER, 0, CHARINDEX('-',@REGISTER))
		 SET @QUANTITY = SUBSTRING(@REGISTER, CHARINDEX('-',@REGISTER)+1, LEN(@REGISTER))

		 INSERT INTO @PURCHASEORDERDETAIL (REFERENCEID, QUANTITY)
			  SELECT @REFERENCEID, @QUANTITY

		SET @IDREG = @IDREG+1
	END 
	

	/* VARIABLES FOR VALIDATE NOTIFICATION RULES */
	DECLARE @EXPECTED_RECEIPT_DATE_CHANGED BIT = 0 
	DECLARE @DETAILS_DELETED BIT = 0 
	DECLARE @DETAILS_MODIFIED BIT = 0 

	/* VALIDATE IF THE ESTIMATED RECEIPT DATE CHANGES */		 
    IF @EXPECTED_RECEIPT_DATE < @NEWEXPECTEDRECIPDATE
		SET @EXPECTED_RECEIPT_DATE_CHANGED = 1 
		
	/* VALIDATE IF EXISTS DETAILS DELETED */
	SELECT @DETAILS_DELETED = CASE COUNT(1) WHEN 0 THEN 0 ELSE 1 END
	  FROM PURCHASE_ORDER_DETAILS A
     WHERE NOT EXISTS (SELECT 1 FROM @PURCHASEORDERDETAIL B WHERE B.REFERENCEID = A.REFERENCE_ID)
	 
	/* VALIDATE QUANTITIES CHANGED*/
	SELECT @DETAILS_MODIFIED = CASE COUNT(1) WHEN 0 THEN 0 ELSE 1 END
	  FROM PURCHASE_ORDER_DETAILS A
     WHERE EXISTS (SELECT 1 FROM @PURCHASEORDERDETAIL B WHERE B.REFERENCEID = A.REFERENCE_ID AND B.QUANTITY < A.REQUESTED_QUANTITY)

	/* IF I CHANGE THE ESTIMATED RECEIPT DATE, ORDERS WILL BE SEARCHED FOR ALL THE ITEMS OF THE PURCHASE ORDER */
	IF @EXPECTED_RECEIPT_DATE_CHANGED = 1
	BEGIN
		INSERT INTO @CUSTOMERORDERAFFECTED
			 SELECT DISTINCT A.CUSTOMER_ORDER_ID 
			   FROM CUSTOMER_ORDERS A
			   JOIN STATUS_DOCUMENT_TYPES B ON B.STATUS_DOCUMENT_TYPE_ID = A.STATUS_DOCUMENT_TYPE_ID
										   AND B.STATUS_ORDER IN (1,2,3)
			  WHERE A.ESTIMATED_DELIVERY_DATE BETWEEN @EXPECTED_RECEIPT_DATE AND @NEWEXPECTEDRECIPDATE
			    AND EXISTS (SELECT 1 
							  FROM CUSTOMER_ORDER_DETAILS C 
							  JOIN PURCHASE_ORDER_DETAILS D ON D.REFERENCE_ID = C.REFERENCE_ID
														   AND D.PURCHASE_ORDER_ID = @PURCHASEORDERID
							 WHERE C.CUSTOMER_ORDER_ID = A.CUSTOMER_ORDER_ID
							   AND (C.REQUESTED_QUANTITY-C.PROCESSED_QUANTITY-C.DELIVERED_QUANTITY) > 0)
	END

	IF @DETAILS_DELETED = 1
	BEGIN
		INSERT INTO @CUSTOMERORDERAFFECTED
			 SELECT DISTINCT A.CUSTOMER_ORDER_ID 
			   FROM CUSTOMER_ORDERS A
			   JOIN STATUS_DOCUMENT_TYPES B ON B.STATUS_DOCUMENT_TYPE_ID = A.STATUS_DOCUMENT_TYPE_ID
										   AND B.STATUS_ORDER IN (1,2,3)
			  WHERE EXISTS (SELECT 1 
							  FROM CUSTOMER_ORDER_DETAILS C 

							  JOIN PURCHASE_ORDER_DETAILS D ON D.REFERENCE_ID = C.REFERENCE_ID
														   AND D.PURCHASE_ORDER_ID = @PURCHASEORDERID
														   AND NOT EXISTS (SELECT 1 FROM @PURCHASEORDERDETAIL E WHERE E.REFERENCEID = D.REFERENCE_ID)
							 WHERE C.CUSTOMER_ORDER_ID = A.CUSTOMER_ORDER_ID
							   AND (C.REQUESTED_QUANTITY-C.PROCESSED_QUANTITY-C.DELIVERED_QUANTITY) > 0)
				AND NOT EXISTS (SELECT 1 FROM @CUSTOMERORDERAFFECTED F WHERE F.CUSTOMERORDERID = A.CUSTOMER_ORDER_ID)
	END

	IF @DETAILS_MODIFIED = 1
	BEGIN
		INSERT INTO @CUSTOMERORDERAFFECTED
			 SELECT DISTINCT A.CUSTOMER_ORDER_ID 
			   FROM CUSTOMER_ORDERS A
			   JOIN STATUS_DOCUMENT_TYPES B ON B.STATUS_DOCUMENT_TYPE_ID = A.STATUS_DOCUMENT_TYPE_ID
										   AND B.STATUS_ORDER IN (1,2,3)
			  WHERE EXISTS (SELECT 1 
							  FROM CUSTOMER_ORDER_DETAILS C 

							  JOIN PURCHASE_ORDER_DETAILS D ON D.REFERENCE_ID = C.REFERENCE_ID
														   AND D.PURCHASE_ORDER_ID = @PURCHASEORDERID
														   AND EXISTS (SELECT 1 FROM @PURCHASEORDERDETAIL E WHERE E.REFERENCEID = D.REFERENCE_ID AND E.QUANTITY < D.REQUESTED_QUANTITY)
							 WHERE C.CUSTOMER_ORDER_ID = A.CUSTOMER_ORDER_ID
							   AND (C.REQUESTED_QUANTITY-C.PROCESSED_QUANTITY-C.DELIVERED_QUANTITY) > 0)
				AND NOT EXISTS (SELECT 1 FROM @CUSTOMERORDERAFFECTED F WHERE F.CUSTOMERORDERID = A.CUSTOMER_ORDER_ID)
	END
	
	INSERT INTO @CUSTOMERORDERNOTIFICATED
		 SELECT A.CUSTOMER_ID, A.ORDER_NUMBER, B.CUSTOMER_NAME, A.ORDER_DATE, A.ESTIMATED_DELIVERY_DATE, C.STATUS_DOCUMENT_TYPE_NAME 
		   FROM CUSTOMER_ORDERS A
		   JOIN CUSTOMERS B ON B.CUSTOMER_ID = A.CUSTOMER_ID
		   JOIN STATUS_DOCUMENT_TYPES C ON C.STATUS_DOCUMENT_TYPE_ID = A.STATUS_DOCUMENT_TYPE_ID
		  WHERE EXISTS (SELECT 1 FROM @CUSTOMERORDERAFFECTED TEMP WHERE TEMP.CUSTOMERORDERID = A.CUSTOMER_ORDER_ID )

	SELECT CUSTOMERORDERID, ORDERNUMBER, CUSTOMERNAME, ORDERDATE, ESTIMATEDDELIVERYDATE, STATUS_DOCUMENT_TYPE_NAME 
	  FROM @CUSTOMERORDERNOTIFICATED

END
GO
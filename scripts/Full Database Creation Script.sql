USE [master]
GO

/****** Object:  Database [Aldebaran]    Script Date: 7/10/2023 7:41:24 p.ï¿½m. ******/
/*CREATE DATABASE [Aldebaran]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'Aldebaran', FILENAME = N'/var/opt/mssql/data/Aldebaran.mdf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'Aldebaran_log', FILENAME = N'/var/opt/mssql/data/Aldebaran_log.ldf' , SIZE = 8192KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO

IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
	EXEC [Aldebaran].[dbo].[sp_fulltext_database] @action = 'enable'
GO

ALTER DATABASE [Aldebaran] SET ANSI_NULL_DEFAULT ON 
GO

ALTER DATABASE [Aldebaran] SET ANSI_NULLS ON 
GO

ALTER DATABASE [Aldebaran] SET ANSI_PADDING OFF 
GO

ALTER DATABASE [Aldebaran] SET ANSI_WARNINGS OFF 
GO

ALTER DATABASE [Aldebaran] SET ARITHABORT OFF 
GO

ALTER DATABASE [Aldebaran] SET AUTO_CLOSE OFF 
GO

ALTER DATABASE [Aldebaran] SET AUTO_SHRINK ON 
GO

ALTER DATABASE [Aldebaran] SET AUTO_UPDATE_STATISTICS ON 
GO

ALTER DATABASE [Aldebaran] SET CURSOR_CLOSE_ON_COMMIT ON 
GO

ALTER DATABASE [Aldebaran] SET CURSOR_DEFAULT  LOCAL 
GO

ALTER DATABASE [Aldebaran] SET CONCAT_NULL_YIELDS_NULL OFF 
GO

ALTER DATABASE [Aldebaran] SET NUMERIC_ROUNDABORT OFF 
GO

ALTER DATABASE [Aldebaran] SET QUOTED_IDENTIFIER OFF 
GO

ALTER DATABASE [Aldebaran] SET RECURSIVE_TRIGGERS ON 
GO

ALTER DATABASE [Aldebaran] SET  DISABLE_BROKER 
GO

ALTER DATABASE [Aldebaran] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO

ALTER DATABASE [Aldebaran] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [Aldebaran] SET TRUSTWORTHY OFF 
GO

ALTER DATABASE [Aldebaran] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO

ALTER DATABASE [Aldebaran] SET PARAMETERIZATION SIMPLE 
GO

ALTER DATABASE [Aldebaran] SET READ_COMMITTED_SNAPSHOT OFF 
GO

ALTER DATABASE [Aldebaran] SET HONOR_BROKER_PRIORITY OFF 
GO

ALTER DATABASE [Aldebaran] SET RECOVERY FULL 
GO

ALTER DATABASE [Aldebaran] SET  MULTI_USER 
GO

ALTER DATABASE [Aldebaran] SET PAGE_VERIFY CHECKSUM  
GO

ALTER DATABASE [Aldebaran] SET DB_CHAINING OFF 
GO

ALTER DATABASE [Aldebaran] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO

ALTER DATABASE [Aldebaran] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO

ALTER DATABASE [Aldebaran] SET DELAYED_DURABILITY = DISABLED 
GO

ALTER DATABASE [Aldebaran] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO

ALTER DATABASE [Aldebaran] SET QUERY_STORE = OFF
GO

ALTER DATABASE [Aldebaran] SET  READ_WRITE 
GO
*/

USE [Aldebaran]
GO

/**********************Borrado de Indices********************/

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_MODIFIED_PURCHASE_ORDER_DATE' AND object_id = OBJECT_ID('MODIFIED_PURCHASE_ORDERS'))
	DROP INDEX IND_MODIFIED_PURCHASE_ORDER_DATE ON MODIFIED_PURCHASE_ORDERS

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_MODIFIED_CUSTOMER_ORDER_DATE' AND object_id = OBJECT_ID('MODIFIED_CUSTOMER_ORDERS'))
	DROP INDEX IND_MODIFIED_CUSTOMER_ORDER_DATE ON MODIFIED_CUSTOMER_ORDERS

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_ORDERS_IN_PROCESS_PROCESS_DATE' AND object_id = OBJECT_ID('CUSTOMER_ORDERS_IN_PROCESS_PROCESS'))
	DROP INDEX IND_CUSTOMER_ORDERS_IN_PROCESS_PROCESS_DATE ON CUSTOMER_ORDERS_IN_PROCESS_PROCESS

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_ITEMS_LINE' AND object_id = OBJECT_ID('ITEMS'))
	DROP INDEX ITEMS.IND_ITEMS_LINE

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_ITEMS_NAME ' AND object_id = OBJECT_ID('ITEMS'))
	DROP INDEX ITEMS.IND_ITEMS_NAME 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_ITEMS_INTERNAL_REFERENCE' AND object_id = OBJECT_ID('ITEMS'))
	DROP INDEX ITEMS.IND_ITEMS_INTERNAL_REFERENCE 
	
IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_ITEMS_LINE' AND object_id = OBJECT_ID('ITEM_REFERENCES'))
	DROP INDEX ITEM_REFERENCES.IND_REFERENCES_ITEM_ID 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_ITEMS_LINE' AND object_id = OBJECT_ID('ITEM_REFERENCES'))
	DROP INDEX ITEM_REFERENCES.IND_REFERENCES_REFERENCE_NAME 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_ITEMS_LINE' AND object_id = OBJECT_ID('ITEM_REFERENCES'))
	DROP INDEX ITEM_REFERENCES.IND_REFERENCES_INTERNAL_REFERENCE_CODE 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_FORWARDER_CITY' AND object_id = OBJECT_ID('FORWARDERS'))
	DROP INDEX FORWARDERS.IND_FORWARDER_CITY 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_FORWARDER_NAME' AND object_id = OBJECT_ID('FORWARDERS'))
	DROP INDEX FORWARDERS.IND_FORWARDER_NAME 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_CITY' AND object_id = OBJECT_ID('CUSTOMERS'))
	DROP INDEX CUSTOMERS.IND_CUSTOMER_CITY 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_CITY_IDENTIFICATION_NUMBER' AND object_id = OBJECT_ID('CUSTOMERS'))
	DROP INDEX CUSTOMERS.IND_CUSTOMER_CITY_IDENTIFICATION_NUMBER 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_CITY_CUSTOMER_NAME' AND object_id = OBJECT_ID('CUSTOMERS'))
	DROP INDEX CUSTOMERS.IND_CUSTOMER_CITY_CUSTOMER_NAME 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_PROVIDER_PROVIDER_NAME' AND object_id = OBJECT_ID('PROVIDERS'))
	DROP INDEX PROVIDERS.IND_PROVIDER_PROVIDER_NAME 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_PROVIDER_IDENTITY_NUMBER' AND object_id = OBJECT_ID('PROVIDERS'))
	DROP INDEX PROVIDERS.IND_PROVIDER_IDENTITY_NUMBER 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_SHIPPING_METHODS_NAME' AND object_id = OBJECT_ID('SHIPPING_METHODS'))
	DROP INDEX IND_SHIPPING_METHODS_NAME ON SHIPPING_METHODS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_PURCHASE_ORDERS_CREATION_DATE' AND object_id = OBJECT_ID('PURCHASE_ORDERS'))
	DROP INDEX IND_PURCHASE_ORDERS_CREATION_DATE ON PURCHASE_ORDERS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_PURCHASE_ORDERS_STATUS_DOCUMENT' AND object_id = OBJECT_ID('PURCHASE_ORDERS'))
	DROP INDEX IND_PURCHASE_ORDERS_STATUS_DOCUMENT ON PURCHASE_ORDERS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_PURCHASE_ORDERS_REQUEST_DATE' AND object_id = OBJECT_ID('PURCHASE_ORDERS'))
	DROP INDEX IND_PURCHASE_ORDERS_REQUEST_DATE ON PURCHASE_ORDERS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'UQIND_PURCHASE_ORDER_DETAILS' AND object_id = OBJECT_ID('PURCHASE_ORDER_DETAILS'))
	DROP INDEX UQIND_PURCHASE_ORDER_DETAILS ON PURCHASE_ORDER_DETAILS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_PURCHASE_ORDERS_ACTIVITIIES_EXECUTION_DATE' AND object_id = OBJECT_ID('PURCHASE_ORDER_ACTIVITIES'))
	DROP INDEX IND_PURCHASE_ORDERS_ACTIVITIIES_EXECUTION_DATE ON PURCHASE_ORDER_ACTIVITIES 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_RESERVATIONS_ESTADO' AND object_id = OBJECT_ID('CUSTOMER_RESERVATIONS'))
	DROP INDEX IND_CUSTOMER_RESERVATIONS_ESTADO ON CUSTOMER_RESERVATIONS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_RESERVATIONS_CREATION_DATE' AND object_id = OBJECT_ID('CUSTOMER_RESERVATIONS'))
	DROP INDEX IND_CUSTOMER_RESERVATIONS_CREATION_DATE ON CUSTOMER_RESERVATIONS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_RESERVATIONS_RESERVATION_DATE' AND object_id = OBJECT_ID('CUSTOMER_RESERVATIONS'))
	DROP INDEX IND_CUSTOMER_RESERVATIONS_RESERVATION_DATE ON CUSTOMER_RESERVATIONS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_RESERVATIONS_CUSTOMER' AND object_id = OBJECT_ID('CUSTOMER_RESERVATIONS'))
	DROP INDEX IND_CUSTOMER_RESERVATIONS_CUSTOMER ON CUSTOMER_RESERVATIONS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_RESERVATIONS_CUSTOMER_ORDER' AND object_id = OBJECT_ID('CUSTOMER_RESERVATIONS'))
	DROP INDEX IND_CUSTOMER_RESERVATIONS_CUSTOMER_ORDER ON CUSTOMER_RESERVATIONS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_ORDER_ESTADO' AND object_id = OBJECT_ID('CUSTOMER_ORDERS'))
	DROP INDEX IND_CUSTOMER_ORDER_ESTADO ON CUSTOMER_ORDERS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_ORDER_FECHAPEDIDO' AND object_id = OBJECT_ID('CUSTOMER_ORDERS'))
	DROP INDEX IND_CUSTOMER_ORDER_FECHAPEDIDO ON CUSTOMER_ORDERS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_ORDER_CUSTOMER' AND object_id = OBJECT_ID('CUSTOMER_ORDERS'))
	DROP INDEX IND_CUSTOMER_ORDER_CUSTOMER ON CUSTOMER_ORDERS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_ORDER_ORDER_NUMBER' AND object_id = OBJECT_ID('CUSTOMER_ORDERS'))
	DROP INDEX IND_CUSTOMER_ORDER_ORDER_NUMBER ON CUSTOMER_ORDERS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_ORDER_CREACION_DATE' AND object_id = OBJECT_ID('CUSTOMER_ORDERS'))
	DROP INDEX IND_CUSTOMER_ORDER_CREACION_DATE ON CUSTOMER_ORDERS 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_ORDER_ACTIVITIES' AND object_id = OBJECT_ID('CUSTOMER_ORDER_ACTIVITIES'))
	DROP INDEX IND_CUSTOMER_ORDER_ACTIVITIES ON CUSTOMER_ORDER_ACTIVITIES 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_ORDER_LOG' AND object_id = OBJECT_ID('CUSTOMER_ORDER_LOG'))
	DROP INDEX IND_CUSTOMER_ORDER_LOG ON CUSTOMER_ORDER_LOG 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_ORDER_DETAIL_LOG' AND object_id = OBJECT_ID('CUSTOMER_ORDER_DETAIL_LOG'))
	DROP INDEX IND_CUSTOMER_ORDER_DETAIL_LOG ON CUSTOMER_ORDER_DETAIL_LOG 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_PURCHASE_ORDER_LOG' AND object_id = OBJECT_ID('PURCHASE_ORDER_LOG'))
	DROP INDEX IND_PURCHASE_ORDER_LOG ON PURCHASE_ORDER_LOG 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_PURCHASE_ORDER_DETAIL_LOG' AND object_id = OBJECT_ID('PURCHASE_ORDER_DETAIL_LOG'))
	DROP INDEX IND_PURCHASE_ORDER_DETAIL_LOG ON PURCHASE_ORDER_DETAIL_LOG 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_RESERVATION_LOG' AND object_id = OBJECT_ID('CUSTOMER_RESERVATION_LOG'))
	DROP INDEX IND_CUSTOMER_RESERVATION_LOG ON CUSTOMER_RESERVATION_LOG 

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_CUSTOMER_RESERVATION_DETAIL_LOG' AND object_id = OBJECT_ID('CUSTOMER_RESERVATION_DETAIL_LOG'))
	DROP INDEX IND_CUSTOMER_RESERVATION_DETAIL_LOG ON CUSTOMER_RESERVATION_DETAIL_LOG 
GO

IF EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IND_WAREHOUSE_TRANSFER_DETAIL_REFERENCE' AND object_id = OBJECT_ID('WAREHOUSE_TRANSFER_DETAIL'))
	DROP INDEX IND_WAREHOUSE_TRANSFER_DETAIL_REFERENCE ON WAREHOUSE_TRANSFER_DETAIL 
GO

/*****************Borrado de tablas******************/
IF OBJECT_ID('log.logs', 'U') IS NOT NULL
	DROP TABLE log.logs
GO

IF EXISTS (SELECT 1 FROM sys.schemas WHERE name = 'log')	
	DROP SCHEMA [log]
GO

IF OBJECT_ID('NOTIFICATION_PROVIDER_SETTINGS', 'U') IS NOT NULL
	DROP TABLE NOTIFICATION_PROVIDER_SETTINGS

IF OBJECT_ID('NOTIFICATION_TEMPLATES', 'U') IS NOT NULL
	DROP TABLE NOTIFICATION_TEMPLATES

IF OBJECT_ID('WAREHOUSE_TRANSFER_DETAILS', 'U') IS NOT NULL
	DROP TABLE WAREHOUSE_TRANSFER_DETAILS

IF OBJECT_ID('WAREHOUSE_TRANSFERS', 'U') IS NOT NULL
    DROP TABLE WAREHOUSE_TRANSFERS

IF OBJECT_ID('MODIFIED_ORDER_SHIPMENT', 'U') IS NOT NULL
	DROP TABLE MODIFIED_ORDER_SHIPMENT

IF OBJECT_ID('CANCELED_ORDER_SHIPMENT', 'U') IS NOT NULL
	DROP TABLE CANCELED_ORDER_SHIPMENT

IF OBJECT_ID('CUSTOMER_ORDER_SHIPMENT_DETAILS', 'U') IS NOT NULL
	DROP TABLE CUSTOMER_ORDER_SHIPMENT_DETAILS

IF OBJECT_ID('CUSTOMER_ORDER_SHIPMENTS', 'U') IS NOT NULL
	DROP TABLE CUSTOMER_ORDER_SHIPMENTS

IF OBJECT_ID('MODIFIED_ORDERS_IN_PROCESS', 'U') IS NOT NULL
	DROP TABLE MODIFIED_ORDERS_IN_PROCESS

IF OBJECT_ID('CANCELED_ORDERS_IN_PROCESS', 'U') IS NOT NULL
	DROP TABLE CANCELED_ORDERS_IN_PROCESS

IF OBJECT_ID('CUSTOMER_ORDER_IN_PROCESS_DETAILS', 'U') IS NOT NULL
	DROP TABLE CUSTOMER_ORDER_IN_PROCESS_DETAILS

IF OBJECT_ID('CUSTOMER_ORDERS_IN_PROCESS', 'U') IS NOT NULL
	DROP TABLE CUSTOMER_ORDERS_IN_PROCESS

IF OBJECT_ID('MODIFIED_CUSTOMER_RESERVATIONS', 'U') IS NOT NULL
	DROP TABLE MODIFIED_CUSTOMER_RESERVATIONS

IF OBJECT_ID('CANCELED_CUSTOMER_RESERVATIONS', 'U') IS NOT NULL
	DROP TABLE CANCELED_CUSTOMER_RESERVATIONS

IF OBJECT_ID('CUSTOMER_RESERVATION_DETAILS', 'U') IS NOT NULL
	DROP TABLE CUSTOMER_RESERVATION_DETAILS

IF OBJECT_ID('CUSTOMER_RESERVATIONS', 'U') IS NOT NULL
	DROP TABLE CUSTOMER_RESERVATIONS

IF OBJECT_ID('CLOSED_CUSTOMER_ORDERS', 'U') IS NOT NULL
	DROP TABLE CLOSED_CUSTOMER_ORDERS

IF OBJECT_ID('CLOSE_CUSTOMER_ORDER_REASONS', 'U') IS NOT NULL
	DROP TABLE CLOSE_CUSTOMER_ORDER_REASONS

IF OBJECT_ID('MODIFIED_CUSTOMER_ORDERS', 'U') IS NOT NULL
    DROP TABLE MODIFIED_CUSTOMER_ORDERS

IF OBJECT_ID('CANCELED_CUSTOMER_ORDERS', 'U') IS NOT NULL
    DROP TABLE CANCELED_CUSTOMER_ORDERS

IF OBJECT_ID('CUSTOMER_ORDER_ACTIVITY_DETAILS', 'U') IS NOT NULL
    DROP TABLE CUSTOMER_ORDER_ACTIVITY_DETAILS

IF OBJECT_ID('CUSTOMER_ORDER_ACTIVITIES', 'U') IS NOT NULL
    DROP TABLE CUSTOMER_ORDER_ACTIVITIES

IF OBJECT_ID('CUSTOMER_RESERVATION_DETAILS', 'U') IS NOT NULL
    DROP TABLE CUSTOMER_RESERVATION_DETAILS

IF OBJECT_ID('CUSTOMER_RESERVATIONS', 'U') IS NOT NULL
    DROP TABLE CUSTOMER_RESERVATIONS

IF OBJECT_ID('CUSTOMER_ORDER_DETAILS', 'U') IS NOT NULL
    DROP TABLE CUSTOMER_ORDER_DETAILS

IF OBJECT_ID('CUSTOMER_ORDERS', 'U') IS NOT NULL
    DROP TABLE CUSTOMER_ORDERS

IF OBJECT_ID('ADJUSTMENT_DETAILS', 'U') IS NOT NULL
    DROP TABLE ADJUSTMENT_DETAILS
	
IF OBJECT_ID('ADJUSTMENTS', 'U') IS NOT NULL
    DROP TABLE ADJUSTMENTS	

IF OBJECT_ID('PURCHASE_ORDER_DETAILS', 'U') IS NOT NULL
	DROP TABLE PURCHASE_ORDER_DETAILS

IF OBJECT_ID('PURCHASE_ORDER_ACTIVITIES', 'U') IS NOT NULL
	DROP TABLE PURCHASE_ORDER_ACTIVITIES

IF OBJECT_ID('CANCELED_PURCHASE_ORDERS', 'U') IS NOT NULL
	DROP TABLE CANCELED_PURCHASE_ORDERS

IF OBJECT_ID('MODIFIED_PURCHASE_ORDERS', 'U') IS NOT NULL
	DROP TABLE MODIFIED_PURCHASE_ORDERS
	
IF OBJECT_ID('PURCHASE_ORDERS', 'U') IS NOT NULL
	DROP TABLE PURCHASE_ORDERS

IF OBJECT_ID('CANCELLATION_REASONS', 'U') IS NOT NULL
	DROP TABLE CANCELLATION_REASONS

IF OBJECT_ID('MODIFICATION_REASONS', 'U') IS NOT NULL
	DROP TABLE MODIFICATION_REASONS
	
IF OBJECT_ID('STATUS_DOCUMENT_TYPES', 'U') IS NOT NULL
	DROP TABLE STATUS_DOCUMENT_TYPES
	
IF OBJECT_ID('ITEMS_AREA', 'U') IS NOT NULL
	DROP TABLE ITEMS_AREA	

IF OBJECT_ID('ACTIVITY_TYPES_AREA', 'U') IS NOT NULL
	DROP TABLE ACTIVITY_TYPES_AREA

IF OBJECT_ID('VISUALIZED_ALARMS', 'U') IS NOT NULL
	DROP TABLE VISUALIZED_ALARMS

IF OBJECT_ID('ALARMS', 'U') IS NOT NULL
	DROP TABLE ALARMS

IF OBJECT_ID('ALARM_MESSAGES', 'U') IS NOT NULL
	DROP TABLE ALARM_MESSAGES

IF OBJECT_ID('USERS_ALARM_TYPE', 'U') IS NOT NULL
	DROP TABLE USERS_ALARM_TYPE

IF OBJECT_ID('ALARM_TYPES', 'U') IS NOT NULL
	DROP TABLE ALARM_TYPES

IF OBJECT_ID('DOCUMENT_TYPES', 'U') IS NOT NULL
	DROP TABLE DOCUMENT_TYPES

IF OBJECT_ID('REFERENCES_WAREHOUSE', 'U') IS NOT NULL
	DROP TABLE REFERENCES_WAREHOUSE

IF OBJECT_ID('WAREHOUSES', 'U') IS NOT NULL
	DROP TABLE WAREHOUSES

IF OBJECT_ID('PROVIDER_REFERENCES', 'U') IS NOT NULL
    DROP TABLE PROVIDER_REFERENCES
	
IF OBJECT_ID('ITEM_REFERENCES', 'U') IS NOT NULL
    DROP TABLE ITEM_REFERENCES

IF OBJECT_ID('PACKAGING', 'U') IS NOT NULL
	DROP TABLE PACKAGING
	
IF OBJECT_ID('ITEMS', 'U') IS NOT NULL
    DROP TABLE ITEMS

IF OBJECT_ID('LINES', 'U') IS NOT NULL
    DROP TABLE LINES
		
IF OBJECT_ID('CURRENCIES', 'U') IS NOT NULL
    DROP TABLE CURRENCIES

IF OBJECT_ID('MEASURE_UNITS', 'U') IS NOT NULL
    DROP TABLE MEASURE_UNITS

IF OBJECT_ID('CUSTOMER_CONTACTS', 'U') IS NOT NULL
    DROP TABLE CUSTOMER_CONTACTS
	   
IF OBJECT_ID('USERS', 'U') IS NOT NULL
    DROP TABLE USERS

IF OBJECT_ID('CUSTOMERS', 'U') IS NOT NULL
    DROP TABLE CUSTOMERS

IF OBJECT_ID('PROVIDERS', 'U') IS NOT NULL
	DROP TABLE PROVIDERS

IF OBJECT_ID('PROCESS_SATELLITES', 'U') IS NOT NULL
	DROP TABLE PROCESS_SATELLITES

IF OBJECT_ID('ACTIVITY_TYPES', 'U') IS NOT NULL
	DROP TABLE ACTIVITY_TYPES

IF OBJECT_ID('SHIPMENT_FORWARDER_AGENT_METHODS', 'U') IS NOT NULL
	DROP TABLE SHIPMENT_FORWARDER_AGENT_METHODS

IF OBJECT_ID('FORWARDER_AGENTS', 'U') IS NOT NULL
	DROP TABLE FORWARDER_AGENTS

IF OBJECT_ID('SHIPMENT_METHODS', 'U') IS NOT NULL
	DROP TABLE SHIPMENT_METHODS

IF OBJECT_ID('FORWARDERS', 'U') IS NOT NULL
	DROP TABLE FORWARDERS

IF OBJECT_ID('CITIES', 'U') IS NOT NULL
    DROP TABLE CITIES

IF OBJECT_ID('DEPARTMENTS', 'U') IS NOT NULL
    DROP TABLE DEPARTMENTS

IF OBJECT_ID('COUNTRIES', 'U') IS NOT NULL
    DROP TABLE COUNTRIES

IF OBJECT_ID('SHIPPING_METHODS', 'U') IS NOT NULL
    DROP TABLE SHIPPING_METHODS

IF OBJECT_ID('ADJUSTMENT_REASONS', 'U') IS NOT NULL
	DROP TABLE ADJUSTMENT_REASONS

IF OBJECT_ID('ADJUSTMENT_TYPES', 'U') IS NOT NULL
	DROP TABLE ADJUSTMENT_TYPES

IF OBJECT_ID('EMPLOYEES', 'U') IS NOT NULL
	DROP TABLE EMPLOYEES

IF OBJECT_ID('AspNetUserTokens', 'U') IS NOT NULL
	DROP TABLE AspNetUserTokens

IF OBJECT_ID('AspNetUserRoles', 'U') IS NOT NULL
	DROP TABLE AspNetUserRoles

IF OBJECT_ID('AspNetUserLogins', 'U') IS NOT NULL
	DROP TABLE AspNetUserLogins

IF OBJECT_ID('AspNetUserClaims', 'U') IS NOT NULL
	DROP TABLE AspNetUserClaims

IF OBJECT_ID('AspNetRoleClaims', 'U') IS NOT NULL
	DROP TABLE AspNetRoleClaims

IF OBJECT_ID('AspNetUsers', 'U') IS NOT NULL
	DROP TABLE AspNetUsers

IF OBJECT_ID('AspNetRoles', 'U') IS NOT NULL
	DROP TABLE AspNetRoles

IF OBJECT_ID('AREAS', 'U') IS NOT NULL
	DROP TABLE AREAS

IF OBJECT_ID('IDENTITY_TYPES', 'U') IS NOT NULL
    DROP TABLE IDENTITY_TYPES
GO

/* BORRADO DE FUNCIONES */

IF OBJECT_ID('FIELD_EXISTS', 'FN') IS NOT NULL
	DROP FUNCTION FIELD_EXISTS
GO

/**************Creacion de Tablas***************/

/*non administrable tables*/
CREATE TABLE areas
(
  AREA_ID smallint NOT NULL IDENTITY(1,1),
  AREA_CODE varchar(10) NOT NULL,
  AREA_NAME varchar(50) NOT NULL,
  DESCRIPTION varchar(200),
  CONSTRAINT PK_AREA PRIMARY KEY (AREA_ID),
  CONSTRAINT UQ_AREA_CODE UNIQUE (AREA_CODE),
  CONSTRAINT UQ_AREA_NAME UNIQUE (AREA_NAME)
)
GO

CREATE TABLE document_types
(
  DOCUMENT_TYPE_ID smallint NOT NULL IDENTITY(1,1),
  DOCUMENT_TYPE_NAME varchar(30) NOT NULL,
  DOCUMENT_TYPE_CODE char(1) NOT NULL
  CONSTRAINT PK_DOCUMENT_TYPE PRIMARY KEY (DOCUMENT_TYPE_ID),
  CONSTRAINT UQ_DOCUMENT_TYPE_CODE UNIQUE (DOCUMENT_TYPE_CODE)
)
GO

CREATE TABLE warehouses
(
  WAREHOUSE_ID smallint NOT NULL IDENTITY(1,1),
  WAREHOUSE_NAME varchar(30) NOT NULL,
  IS_CATALOG_VISIBLE BIT NOT NULL DEFAULT 0,
  WAREHOUSE_CODE smallint NOT NULL,
  CONSTRAINT PK_WAREHOUSE PRIMARY KEY (WAREHOUSE_ID),
  CONSTRAINT UQ_WAREHOUSE_NAME UNIQUE (WAREHOUSE_NAME),
  CONSTRAINT UQ_WAREHOUSE_CODE UNIQUE (WAREHOUSE_CODE)
)
GO

CREATE TABLE countries
(
	COUNTRY_ID INT NOT NULL IDENTITY(1,1),
	COUNTRY_NAME varchar(30) NOT NULL,
	COUNTRY_CODE varchar(5) NOT NULL, 
	CONSTRAINT PK_COUNTRY PRIMARY KEY (COUNTRY_ID),
	CONSTRAINT UQ_COUNTRY_NAME UNIQUE (COUNTRY_NAME),
	CONSTRAINT UQ_COUNTRY_CODE UNIQUE (COUNTRY_CODE),
)
GO

CREATE TABLE departments
(
	DEPARTMENT_ID int NOT NULL IDENTITY(1,1),
	DEPARTMENT_NAME varchar(30) NOT NULL,
	COUNTRY_ID INT not null,
	CONSTRAINT PK_DEPARTMENT PRIMARY KEY (DEPARTMENT_ID),	
	CONSTRAINT FK_DEPARTMENT_COUNTRY FOREIGN KEY (COUNTRY_ID) 
	  REFERENCES COUNTRIES (COUNTRY_ID),
	CONSTRAINT UQ_DEPARTMENT_NAME UNIQUE (DEPARTMENT_NAME, COUNTRY_ID)	
)
GO

CREATE TABLE cities
(
  CITY_ID int NOT NULL IDENTITY(1,1),
  CITY_NAME varchar(40) NOT NULL,
  DEPARTMENT_ID int NOT NULL,
  CONSTRAINT PK_CITY PRIMARY KEY (CITY_ID), 
  CONSTRAINT UQ_CITY_NAME UNIQUE (CITY_NAME, DEPARTMENT_ID),
  CONSTRAINT FK_CITY_DEPARTAMENT FOREIGN KEY (DEPARTMENT_ID) 
    REFERENCES DEPARTMENTS (DEPARTMENT_ID)  
)
GO

CREATE TABLE lines
(
  LINE_ID SMALLINT NOT NULL IDENTITY(1,1),
  LINE_CODE varchar(10) NOT NULL,
  LINE_NAME varchar(30) NOT NULL,
  IS_DEMON bit DEFAULT 0 NOT NULL,
  IS_ACTIVE bit DEFAULT 1 NOT NULL,
  CONSTRAINT PK_LINE PRIMARY KEY (LINE_ID),
  CONSTRAINT UQ_LINE_CODE UNIQUE (LINE_CODE),
  CONSTRAINT UQ_LINE_NAME UNIQUE (LINE_NAME)
)
GO

CREATE TABLE currencies
(
  CURRENCY_ID SMALLINT NOT NULL IDENTITY(1,1),
  CURRENCY_NAME varchar(30) NOT NULL,
  CONSTRAINT PK_CURRENCY PRIMARY KEY (CURRENCY_ID),
  CONSTRAINT UQ_MONEDAS_NOMBRE UNIQUE (CURRENCY_NAME)
)
GO

CREATE TABLE measure_units
(
  MEASURE_UNIT_ID SMALLINT NOT NULL IDENTITY(1,1),
  MEASURE_UNIT_NAME  varchar(30) NOT NULL,
  CONSTRAINT PK_MEASURE_UNIT PRIMARY KEY (MEASURE_UNIT_ID),
  CONSTRAINT UQ_MEASURE_UNIT_NAME UNIQUE (MEASURE_UNIT_NAME)
)
GO

CREATE TABLE items
(
    ITEM_ID int NOT NULL IDENTITY(1,1),
    LINE_ID smallint NOT NULL,
    INTERNAL_REFERENCE varchar(10) NOT NULL,
    ITEM_NAME varchar(50) NOT NULL,
    PROVIDER_REFERENCE varchar(27) NOT NULL,
    PROVIDER_ITEM_NAME varchar(50) NOT NULL,
    FOB_COST float NOT NULL,
    CURRENCY_ID smallint NOT NULL,
    NOTES varchar(250),
    IS_EXTERNAL_INVENTORY bit DEFAULT 0 NOT NULL,
    CIF_COST Float NOT NULL,
    VOLUME float NOT NULL,
    WEIGHT float NOT NULL,
    FOB_MEASURE_UNIT_ID smallint NOT NULL,
    CIF_MEASURE_UNIT_ID smallint,
    IS_DOMESTIC_PRODUCT bit DEFAULT 0 NOT NULL,
    IS_ACTIVE bit DEFAULT 1 NOT NULL,
    IS_CATALOG_VISIBLE bit DEFAULT 0 NOT NULL,
    CONSTRAINT PK_ITEMS PRIMARY KEY (ITEM_ID),
    CONSTRAINT UQ_ITEM_NAME UNIQUE (ITEM_NAME),
    CONSTRAINT UQ_INTERNAL_REF UNIQUE (INTERNAL_REFERENCE),
	CONSTRAINT FK_ITEM_LINE
	  FOREIGN KEY (LINE_ID) REFERENCES LINES (LINE_ID),
	CONSTRAINT FK_ITEM_CURRENCY
	  FOREIGN KEY (CURRENCY_ID) REFERENCES CURRENCIES (CURRENCY_ID),
	CONSTRAINT FK_ITEM_MEASURE_UNIT_CIF
	  FOREIGN KEY (CIF_MEASURE_UNIT_ID) REFERENCES MEASURE_UNITS (MEASURE_UNIT_ID),
	CONSTRAINT FK_ITEMS_MEASURE_UNIT_FOB
	  FOREIGN KEY (FOB_MEASURE_UNIT_ID) REFERENCES MEASURE_UNITS (MEASURE_UNIT_ID),
	CONSTRAINT CK_ITEMS_FOB_COST check (FOB_COST > 0),
	CONSTRAINT CK_ITEMS_WEIGHT check ((WEIGHT > 0) or (WEIGHT is null)),	
	CONSTRAINT CK_ITEMS_VOLUME check ((VOLUME > 0) or (VOLUME is null))
)
GO

CREATE TABLE item_references
(
  REFERENCE_ID integer NOT NULL IDENTITY(1,1),
  ITEM_ID integer NOT NULL,
  REFERENCE_CODE varchar(30) NOT NULL,
  PROVIDER_REFERENCE_CODE varchar(10),
  REFERENCE_NAME varchar(30) NOT NULL,
  PROVIDER_REFERENCE_NAME varchar(30),
  NOTES varchar(250),
  INVENTORY_QUANTITY integer DEFAULT 0 NOT NULL,
  ORDERED_QUANTITY integer DEFAULT 0 NOT NULL,
  RESERVED_QUANTITY integer DEFAULT 0 NOT NULL,
  WORK_IN_PROCESS_QUANTITY integer DEFAULT 0 NOT NULL,
  IS_ACTIVE bit DEFAULT 1 NOT NULL,
  IS_SOLD_OUT bit DEFAULT 0 NOT NULL,
  ALARM_MINIMUM_QUANTITY integer DEFAULT 0 NOT NULL,
  CONSTRAINT PK_REFERENCE PRIMARY KEY (REFERENCE_ID),
  CONSTRAINT UQ_REFERENCE_NAME UNIQUE (ITEM_ID,REFERENCE_NAME),
  CONSTRAINT FK_REFERENCE_ITEM FOREIGN KEY (ITEM_ID) REFERENCES ITEMS (ITEM_ID),
  CONSTRAINT UQ_REFERENCE_CODE UNIQUE (ITEM_ID,REFERENCE_CODE)  
)
GO

CREATE TABLE PACKAGING
(
    PACKAGING_ID SMALLINT NOT NULL IDENTITY(1,1),
    ITEM_ID int NOT NULL,
    WEIGHT float,
    HEIGHT float,
    WIDTH float,
    LENGTH float,
    QUANTITY int,
    CONSTRAINT PK_PACKAGING PRIMARY KEY (PACKAGING_ID),
	CONSTRAINT FK_PACKAGING_ITEMS
      FOREIGN KEY (ITEM_ID) REFERENCES ITEMS (ITEM_ID)
)
GO
  
CREATE TABLE activity_types
(
  ACTIVITY_TYPE_ID SMALLINT NOT NULL IDENTITY(1,1),
  ACTIVITY_TYPE_NAME varchar(80) NOT NULL,
  CONSTRAINT PK_ACTIVITY_TYPE PRIMARY KEY (ACTIVITY_TYPE_ID)
)
GO

CREATE TABLE identity_types
(
  IDENTITY_TYPE_ID int NOT NULL IDENTITY(1,1),
  IDENTITY_TYPE_CODE char(3) NOT NULL,
  IDENTITY_TYPE_NAME varchar(30) NOT NULL,
  CONSTRAINT PK_IDENTITY_TYPE PRIMARY KEY (IDENTITY_TYPE_ID),
  CONSTRAINT UQ_IDENTITY_TYPE_CODE UNIQUE (IDENTITY_TYPE_CODE),
  CONSTRAINT UQ_IDENTITY_TYPE_NAME UNIQUE (IDENTITY_TYPE_NAME)
)
GO

CREATE TABLE forwarders
(
  FORWARDER_ID integer NOT NULL IDENTITY(1,1),
  FORWARDER_NAME varchar(50) NOT NULL,
  PHONE1 varchar(20) NOT NULL,
  PHONE2 varchar(20),
  FAX varchar(22),
  FORWARDER_ADDRESS varchar(52) NOT NULL,
  MAIL1 varchar(30),
  MAIL2 varchar(30),
  CITY_ID integer NOT NULL,
  CONSTRAINT PK_FORWARDER PRIMARY KEY (FORWARDER_ID),
  CONSTRAINT UQ_FORWARDER_NAME UNIQUE (FORWARDER_NAME),
  CONSTRAINT FK_FORWARDER_CITY
	FOREIGN KEY (CITY_ID) REFERENCES CITIES (CITY_ID)
)
GO

CREATE TABLE forwarder_agents
(
  FORWARDER_AGENT_ID int NOT NULL IDENTITY(1,1),
  FORWARDER_ID int NOT NULL,
  FORWARDER_AGENT_NAME varchar(50) NOT NULL,
  PHONE1 varchar(20) NOT NULL,
  PHONE2 varchar(20),
  FAX varchar(22),
  FORWARDER_AGENT_ADDRESS varchar(52) NOT NULL,
  CITY_ID INT NOT NULL,
  CONTACT varchar(30) NOT NULL,
  EMAIL1 varchar(30),
  EMAIL2 varchar(30),
  CONSTRAINT PK_FORWARDER_AGENT PRIMARY KEY (FORWARDER_AGENT_ID),
  CONSTRAINT UQ_FORWARDER_AGENT_NAME UNIQUE (FORWARDER_ID, FORWARDER_AGENT_NAME),
  CONSTRAINT FK_FORWARDER_AGENT_CITY FOREIGN KEY (CITY_ID) REFERENCES CITIES (CITY_ID),
  CONSTRAINT FK_FORWARDER_AGENT_FORWARDER 
	FOREIGN KEY (FORWARDER_ID) REFERENCES FORWARDERS (FORWARDER_ID)
)
GO

CREATE TABLE shipment_methods --embarque
(
  SHIPMENT_METHOD_ID smallint NOT NULL IDENTITY(1,1),
  SHIPMENT_METHOD_NAME varchar(30) NOT NULL,
  SHIPMENT_METHOD_NOTES varchar(150),
  CONSTRAINT PK_SHIPMENT_METHOD PRIMARY KEY (SHIPMENT_METHOD_ID),
  CONSTRAINT UQ_SHIPMENT_METHOD_NAME UNIQUE (SHIPMENT_METHOD_NAME)
)
GO

CREATE TABLE shipment_forwarder_agent_methods
(
  SHIPMENT_FORWARDER_AGENT_METHOD_ID smallint NOT NULL IDENTITY(1,1),
  SHIPMENT_METHOD_ID smallint NOT NULL,
  FORWARDER_AGENT_ID integer NOT NULL,
  CONSTRAINT PK_SHIPMENT_FORWARDER_AGENT_METHOD PRIMARY KEY (SHIPMENT_FORWARDER_AGENT_METHOD_ID),
  CONSTRAINT UQ_SHIPMENT_FORWARDER_AGENT_METHOD_FORWARDER_AGENT UNIQUE (SHIPMENT_METHOD_ID,FORWARDER_AGENT_ID),
  CONSTRAINT FK_SHIPMENT_FORWARDER_AGENT_METHOD_FORWARDER_AGENT FOREIGN KEY (FORWARDER_AGENT_ID) REFERENCES FORWARDER_AGENTS (FORWARDER_AGENT_ID),
  CONSTRAINT FK_SHIPMENT_FORWARDER_AGENT_METHOD_SHIPMENT_METHOD FOREIGN KEY (SHIPMENT_METHOD_ID) REFERENCES SHIPMENT_METHODS (SHIPMENT_METHOD_ID)
)
GO

CREATE TABLE items_area
(
	ITEM_ID int NOT NULL,
	AREA_ID smallint NOT NULL
	CONSTRAINT PK_ITEM_AREA PRIMARY KEY (ITEM_ID, AREA_ID),
	CONSTRAINT FK_ITEM_AREA_ITEM FOREIGN KEY (ITEM_ID) 
	  REFERENCES ITEMS (ITEM_ID),
	CONSTRAINT FK_ITEM_AREA_AREA FOREIGN KEY (AREA_ID) 
	  REFERENCES AREAS (AREA_ID)
)
GO

CREATE TABLE references_warehouse
(
	REFERENCE_ID int NOT NULL,
	WAREHOUSE_ID smallint NOT NULL,
	QUANTITY INT NOT NULL, 
	CONSTRAINT PK_REFERENCE_WAREHOUSE PRIMARY KEY (REFERENCE_ID, WAREHOUSE_ID),	
	CONSTRAINT FK_ITEM_ITEM_WAREHOUSE_ITEM_REFERENCE FOREIGN KEY (REFERENCE_ID) 
	  REFERENCES ITEM_REFERENCES (REFERENCE_ID),
	CONSTRAINT FK_ITEM_WAREHOUSE_WAREHOUSE FOREIGN KEY (WAREHOUSE_ID) 
	  REFERENCES WAREHOUSES (WAREHOUSE_ID)
)
GO

CREATE TABLE customers
(
  CUSTOMER_ID INT NOT NULL IDENTITY(1,1),
  IDENTITY_TYPE_ID INT NOT NULL,
  IDENTITY_NUMBER VARCHAR(15) NOT NULL,
  CUSTOMER_NAME VARCHAR(50) NOT NULL,
  PHONE1 VARCHAR(20) NOT NULL,
  PHONE2 VARCHAR(20),
  FAX VARCHAR(22),
  CUSTOMER_ADDRESS VARCHAR(52) NOT NULL,
  CELL_PHONE VARCHAR(15),
  EMAIL1 VARCHAR(252),
  EMAIL2 VARCHAR(252),
  CITY_ID INT NOT NULL,
  EMAIL3 VARCHAR(252),
  SEND_EMAIL BIT DEFAULT 0 NOT NULL,
  CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID),
  CONSTRAINT UQ_CUSTOMER_NAME UNIQUE (CUSTOMER_NAME),
  CONSTRAINT UQ_CUSTOMER_IDENTIFICATION UNIQUE (IDENTITY_NUMBER),
  CONSTRAINT FK_CUSTOMER_IDENTITY_TYPE FOREIGN KEY (IDENTITY_TYPE_ID) REFERENCES IDENTITY_TYPES (IDENTITY_TYPE_ID),
  CONSTRAINT FK_CUSTOMER_CITY FOREIGN KEY (CITY_ID) REFERENCES CITIES (CITY_ID)
)
GO

CREATE TABLE customer_contacts
(
  CUSTOMER_CONTACT_ID integer NOT NULL IDENTITY (1,1),
  CUSTOMER_ID integer NOT NULL,
  CUSTOMER_CONTACT_NAME varchar(50) NOT NULL,
  TITLE varchar(20),
  PHONE varchar(15),
  EMAIL varchar(30),
  CONSTRAINT PK_CUSTOMER_CONTACT PRIMARY KEY (CUSTOMER_CONTACT_ID),
  CONSTRAINT UQ_CUSTOMER_CONTACT UNIQUE (CUSTOMER_ID, CUSTOMER_CONTACT_NAME),
  CONSTRAINT FK_CUSTOMER_CONTACT_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID) 
)
GO

CREATE TABLE providers
(
  PROVIDER_ID INT NOT NULL IDENTITY(1,1),
  IDENTITY_TYPE_ID INT NOT NULL,
  IDENTITY_NUMBER VARCHAR(15) NOT NULL,
  PROVIDER_CODE VARCHAR(10) NOT NULL,
  PROVIDER_NAME VARCHAR(50) NOT NULL,
  PROVIDER_ADDRESS VARCHAR(80),
  PHONE VARCHAR(20),
  FAX VARCHAR(22),
  EMAIL VARCHAR(30),
  CONTACT_PERSON VARCHAR(50),
  CITY_ID INT NOT NULL,
  CONSTRAINT PK_PROVIDER PRIMARY KEY (PROVIDER_ID),
  CONSTRAINT UQ_PROVIDER_PROVIDER_CODE UNIQUE (PROVIDER_CODE),
  CONSTRAINT UQ_PROVIDER_PROVIDER_NAME UNIQUE (PROVIDER_NAME),
  CONSTRAINT UQ_PROVIDER_IDENTITY_NUMBER UNIQUE (IDENTITY_NUMBER),
  CONSTRAINT FK_PROVIDER_IDENTITY_TYPE FOREIGN KEY (IDENTITY_TYPE_ID) REFERENCES IDENTITY_TYPES (IDENTITY_TYPE_ID),
  CONSTRAINT FK_PROVIDER_IDENTITY_CITY FOREIGN KEY (CITY_ID) REFERENCES CITIES (CITY_ID)
)
GO

CREATE TABLE provider_references
(
  REFERENCE_ID integer NOT NULL,
  PROVIDER_ID integer NOT NULL,
  CONSTRAINT PK_PROVIDER_REFERENCE PRIMARY KEY (REFERENCE_ID,PROVIDER_ID),
  CONSTRAINT FK_PROVIDER_REFERENCE_REFERENCE FOREIGN KEY (REFERENCE_ID) REFERENCES ITEM_REFERENCES (REFERENCE_ID),
  CONSTRAINT FK_PROVIDER_REFERENCE_PROVIDER FOREIGN KEY (PROVIDER_ID) REFERENCES PROVIDERS (PROVIDER_ID)
)
GO

CREATE TABLE shipping_methods --envio--
(
  SHIPPING_METHOD_ID SMALLINT NOT NULL IDENTITY(1,1),
  SHIPPING_METHOD_NAME varchar(30) NOT NULL,
  SHIPPING_METHOD_NOTES varchar(150),
  CONSTRAINT PK_SHIPPING_METHOD PRIMARY KEY (SHIPPING_METHOD_ID),
  CONSTRAINT UQ_SHIPPING_METHOD_NAME UNIQUE (SHIPPING_METHOD_NAME)
)
GO

CREATE TABLE adjustment_reasons
(
  ADJUSTMENT_REASON_ID SMALLINT NOT NULL IDENTITY (1,1),
  ADJUSTMENT_REASON_NAME varchar(30) NOT NULL,
  ADJUSTMENT_REASON_NOTES varchar(150),  
  CONSTRAINT PK_ADJUSTMENT_REASON PRIMARY KEY (ADJUSTMENT_REASON_ID),
  CONSTRAINT UQ_ADJUSTMENT_REASON_NAME UNIQUE (ADJUSTMENT_REASON_NAME)
)
GO

CREATE TABLE cancellation_reasons
(
  CANCELLATION_REASON_ID SMALLINT NOT NULL IDENTITY(1,1),
  CANCELLATION_REASON_NAME varchar(30) NOT NULL,
  DOCUMENT_TYPE_ID SMALLINT NOT NULL,
  NOTES varchar(200),
  CONSTRAINT PK_CANCELLATION_REASON PRIMARY KEY (CANCELLATION_REASON_ID),
  CONSTRAINT FK_CANCELLATION_REASON_DOCUMENT_TYPE FOREIGN KEY (DOCUMENT_TYPE_ID) REFERENCES DOCUMENT_TYPES (DOCUMENT_TYPE_ID),
  CONSTRAINT UQ_CANCELLATION_REASON UNIQUE (DOCUMENT_TYPE_ID, CANCELLATION_REASON_NAME)
)
GO

CREATE TABLE modification_reasons
(
  MODIFICATION_REASON_ID SMALLINT NOT NULL IDENTITY(1,1),
  MODIFICATION_REASON_NAME varchar(30) NOT NULL,
  DOCUMENT_TYPE_ID SMALLINT NOT NULL,
  NOTES varchar(200),
  CONSTRAINT PK_MODIFICATION_REASON PRIMARY KEY (MODIFICATION_REASON_ID),
  CONSTRAINT FK_MODIFICATION_REASON_DOCUMENT_TYPE FOREIGN KEY (DOCUMENT_TYPE_ID) REFERENCES DOCUMENT_TYPES (DOCUMENT_TYPE_ID),
  CONSTRAINT UQ_MODIFICATION_REASON UNIQUE (DOCUMENT_TYPE_ID, MODIFICATION_REASON_NAME)
)
GO

CREATE TABLE activity_types_area
(
  ACTIVITY_TYPE_ID SMALLINT NOT NULL,
  AREA_ID SMALLINT NOT NULL,
  CONSTRAINT PK_ACTIVITY_TYPE_AREA PRIMARY KEY (ACTIVITY_TYPE_ID,AREA_ID),
  CONSTRAINT FK_ACTIVITY_TYPE_AREA_AREA FOREIGN KEY (AREA_ID) REFERENCES AREAS (AREA_ID),
  CONSTRAINT FK_ACTIVITY_TYPE_AREA_ACTIVITY_TYPE FOREIGN KEY (ACTIVITY_TYPE_ID) REFERENCES ACTIVITY_TYPES (ACTIVITY_TYPE_ID)
)
GO

CREATE TABLE status_document_types
(
	STATUS_DOCUMENT_TYPE_ID SMALLINT NOT NULL IDENTITY(1,1),
	STATUS_DOCUMENT_TYPE_NAME VARCHAR(30) NOT NULL,
	STATUS_DOCUMENT_TYPE_CODE CHAR(1) NOT NULL,
	DOCUMENT_TYPE_ID SMALLINT NOT NULL,
	NOTES VARCHAR(250) NOT NULL,
	EDIT_MODE BIT DEFAULT 1 NOT NULL, 
	STATUS_ORDER SMALLINT NOT NULL,
	CONSTRAINT PK_STATUS_DOCUMENT_TYPE PRIMARY KEY (STATUS_DOCUMENT_TYPE_ID),
	CONSTRAINT FK_STATUS_DOCUMENT_TYPE_DOCUMENT_TYPE FOREIGN KEY (DOCUMENT_TYPE_ID) REFERENCES DOCUMENT_TYPES (DOCUMENT_TYPE_ID),  
	CONSTRAINT UQ_STATUS_DOCUMENT_TYPE_NAME UNIQUE (DOCUMENT_TYPE_ID, STATUS_DOCUMENT_TYPE_NAME),
	CONSTRAINT UQ_STATUS_DOCUMENT_TYPE_STATUS_ORDER UNIQUE (DOCUMENT_TYPE_ID, STATUS_ORDER)
)
GO

CREATE TABLE process_satellites
(
  PROCESS_SATELLITE_ID INT NOT NULL IDENTITY(1,1),
  PROCESS_SATELLITE_NAME VARCHAR(100) NOT NULL,
  PROCESS_SATELLITE_ADDRESS VARCHAR(100) NOT NULL,
  IDENTITY_TYPE_ID INT NOT NULL,
  IDENTITY_NUMBER VARCHAR(15) NOT NULL,
  PHONE VARCHAR(20) NOT NULL,
  FAX VARCHAR(20),
  EMAIL VARCHAR(30),
  CITY_ID INT NOT NULL,
  LEGAL_REPRESENTATIVE VARCHAR(50) NOT NULL,
  IS_ACTIVE BIT DEFAULT 1 NOT NULL,
  CONSTRAINT PK_PROCESS_SATELLITE PRIMARY KEY (PROCESS_SATELLITE_ID),
  CONSTRAINT FK_PROCESS_SATELLITE_IDENTITY_TYPES FOREIGN KEY (IDENTITY_TYPE_ID) REFERENCES IDENTITY_TYPES (IDENTITY_TYPE_ID),
  CONSTRAINT FK_PROCESS_SATELLITE_CITIES FOREIGN KEY (CITY_ID) REFERENCES CITIES (CITY_ID),
  CONSTRAINT UQ_PROCESS_SATELLITE_NAME UNIQUE (PROCESS_SATELLITE_NAME)
)
GO

/*security schema tables*/
CREATE TABLE [dbo].[AspNetRoles](
	[Id] [nvarchar](450) NOT NULL,
	[ConcurrencyStamp] [nvarchar](max) NULL,
	[Name] [nvarchar](256) NULL,
	[NormalizedName] [nvarchar](256) NULL,
 CONSTRAINT [PK_AspNetRoles] PRIMARY KEY CLUSTERED ([Id] ASC)
) 
GO

CREATE TABLE [dbo].[AspNetUsers](
	[Id] [nvarchar](450) NOT NULL,
	[AccessFailedCount] [int] NOT NULL,
	[ConcurrencyStamp] [nvarchar](max) NULL,
	[Email] [nvarchar](256) NULL,
	[EmailConfirmed] [bit] NOT NULL,
	[LockoutEnabled] [bit] NOT NULL,
	[LockoutEnd] [datetimeoffset](7) NULL,
	[NormalizedEmail] [nvarchar](256) NULL,
	[NormalizedUserName] [nvarchar](256) NULL,
	[PasswordHash] [nvarchar](max) NULL,
	[PhoneNumber] [nvarchar](max) NULL,
	[PhoneNumberConfirmed] [bit] NOT NULL,
	[SecurityStamp] [nvarchar](max) NULL,
	[TwoFactorEnabled] [bit] NOT NULL,
	[UserName] [nvarchar](256) NULL,
 CONSTRAINT [PK_AspNetUsers] PRIMARY KEY CLUSTERED ([Id] ASC)
)
GO

CREATE TABLE [dbo].[AspNetRoleClaims](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ClaimType] [nvarchar](max) NULL,
	[ClaimValue] [nvarchar](max) NULL,
	[RoleId] [nvarchar](450) NOT NULL,
	CONSTRAINT [PK_AspNetRoleClaims] PRIMARY KEY CLUSTERED ([Id] ASC),
	CONSTRAINT [FK_AspNetRoleClaims_AspNetRoles_RoleId] FOREIGN KEY([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id])
)
GO

CREATE TABLE [dbo].[AspNetUserClaims](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ClaimType] [nvarchar](max) NULL,
	[ClaimValue] [nvarchar](max) NULL,
	[UserId] [nvarchar](450) NOT NULL,
	CONSTRAINT [PK_AspNetUserClaims] PRIMARY KEY CLUSTERED ([Id] ASC),
	CONSTRAINT [FK_AspNetUserClaims_AspNetUsers_UserId] FOREIGN KEY([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id])
)
GO

CREATE TABLE [dbo].[AspNetUserLogins](
	[LoginProvider] [nvarchar](450) NOT NULL,
	[ProviderKey] [nvarchar](450) NOT NULL,
	[ProviderDisplayName] [nvarchar](max) NULL,
	[UserId] [nvarchar](450) NOT NULL,
	CONSTRAINT [PK_AspNetUserLogins] PRIMARY KEY CLUSTERED ([LoginProvider] ASC, [ProviderKey] ASC),
	CONSTRAINT [FK_AspNetUserLogins_AspNetUsers_UserId] FOREIGN KEY([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id])
)
GO

CREATE TABLE [dbo].[AspNetUserRoles](
	[UserId] [nvarchar](450) NOT NULL,
	[RoleId] [nvarchar](450) NOT NULL,
	CONSTRAINT [PK_AspNetUserRoles] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC),
	CONSTRAINT [FK_AspNetUserRoles_AspNetRoles_RoleId] FOREIGN KEY([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]),
	CONSTRAINT [FK_AspNetUserRoles_AspNetUsers_UserId] FOREIGN KEY([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id])
)
GO

CREATE TABLE [dbo].[AspNetUserTokens](
	[UserId] [nvarchar](450) NOT NULL,
	[LoginProvider] [nvarchar](450) NOT NULL,
	[Name] [nvarchar](450) NOT NULL,
	[Value] [nvarchar](max) NULL,
	CONSTRAINT [PK_AspNetUserTokens] PRIMARY KEY CLUSTERED ([UserId] ASC, [LoginProvider] ASC,	[Name] ASC),
	CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId] FOREIGN KEY([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id])
) 
GO

CREATE TABLE [dbo].[employees](
	[EMPLOYEE_ID] [int] IDENTITY(1,1) NOT NULL,
	[AREA_ID] [smallint] NOT NULL,
	[IDENTITY_TYPE_ID] [int] NOT NULL,
	[IDENTITY_NUMBER] [varchar](15) NOT NULL,
	[DISPLAY_NAME] [nvarchar](50) NULL,
	[FULL_NAME] [nvarchar](50) NOT NULL,
	[LOGIN_USER_ID] [nvarchar](450) NULL,
	[POSITION] [nvarchar](30) NULL,
	CONSTRAINT [PK_users] PRIMARY KEY CLUSTERED ([EMPLOYEE_ID] ASC),
	CONSTRAINT [FK_users_areas] FOREIGN KEY([AREA_ID]) REFERENCES [dbo].[areas] ([AREA_ID]),
	CONSTRAINT [FK_users_identity_types] FOREIGN KEY([IDENTITY_TYPE_ID]) REFERENCES [dbo].[identity_types] ([IDENTITY_TYPE_ID]),
	CONSTRAINT [FK_users_AspNetUser] FOREIGN KEY([LOGIN_USER_ID]) REFERENCES [dbo].[AspNetUsers] (ID)
)
GO

CREATE FUNCTION dbo.FIELD_EXISTS
(
    @TableName NVARCHAR(128),
    @ColumnName NVARCHAR(128)
)
RETURNS BIT
AS
BEGIN
    DECLARE @FieldExists BIT

	IF OBJECT_ID(@TableName, 'U') IS NULL
		RETURN 0

    SET @FieldExists = (SELECT CASE 
								 WHEN EXISTS (SELECT 1
								 			    FROM sys.columns
											   WHERE Name = @ColumnName
												 AND object_id = OBJECT_ID(@TableName)) THEN 1 
							     ELSE 0 
							   END)
								
    RETURN @FieldExists
END
GO

/* CUANDO IS_MANUAL_MESSAGE ES 0 EL MENSAJE QUE SE ALMACENA EN LA TABLA ALARMS SE TOMA DE LA TABLA ALARM_MESSAGE, 
   CUANDO IS_MANUAL_MESSAGE ES 1 EL MENSAJE SE TOMA EL CAMPO FIELD, DE LA TABLA TABLE_NAME CNFIGURADOS EN EL ALARM_TYPE */
CREATE TABLE alarm_types
(
  ALARM_TYPE_ID smallint NOT NULL IDENTITY(1,1),
  DOCUMENT_TYPE_ID smallint NOT NULL,
  NAME varchar(30) NOT NULL,
  DESCRIPTION varchar(250) NOT NULL,
  IS_MANUAL_MESSAGE BIT DEFAULT 0 NOT NULL,
  TABLE_NAME varchar(30),
  FIELD_NAME varchar(30),
  CONSTRAINT PK_ALARM_TYPE PRIMARY KEY (ALARM_TYPE_ID),
  CONSTRAINT FK_ALARM_TYPE_DOCUMENT_TYPE FOREIGN KEY (DOCUMENT_TYPE_ID) REFERENCES DOCUMENT_TYPES (DOCUMENT_TYPE_ID),
  CONSTRAINT CK_ALARM_TYPE_TABLE_NAME CHECK ((IS_MANUAL_MESSAGE = 1 AND TABLE_NAME IS NOT NULL AND LEN(TABLE_NAME) > 0 AND OBJECT_ID(TABLE_NAME,'U') > 0) OR (IS_MANUAL_MESSAGE = 0 AND TABLE_NAME IS NULL)),
  CONSTRAINT CK_ALARM_TYPE_FIELD CHECK ((IS_MANUAL_MESSAGE = 1 AND FIELD_NAME IS NOT NULL AND LEN(FIELD_NAME) > 0 AND DBO.FIELD_EXISTS(TABLE_NAME, FIELD_NAME) = 1) OR (IS_MANUAL_MESSAGE = 0 AND FIELD_NAME IS NULL))
)
GO

CREATE TABLE alarm_messages
(
  ALARM_MESSAGE_ID integer NOT NULL IDENTITY(1,1),
  ALARM_TYPE_ID SMALLINT NOT NULL,
  ALARM_MESSAGE varchar(200) NOT NULL,
  CONSTRAINT PK_ALARM_MESSAGE PRIMARY KEY (ALARM_MESSAGE_ID),
  CONSTRAINT FK_ALARM_MESSAGE_ALARM_TYPE FOREIGN KEY (ALARM_TYPE_ID) REFERENCES ALARM_TYPES (ALARM_TYPE_ID) 
)
GO

CREATE TABLE alarms
(
  ALARM_ID INT NOT NULL IDENTITY(1,1),
  ALARM_MESSAGE_ID INT NOT NULL,
  CREATION_DATE DATETIME NOT NULL,
  EXECUTION_DATE DATETIME NOT NULL,
  DOCUMENT_ID INT NOT NULL,
  IS_ACTIVE BIT DEFAULT 1 NOT NULL,
  CONSTRAINT PK_ALARM PRIMARY KEY (ALARM_ID),
  CONSTRAINT FK_ALARM_ALARM_MESSAGE FOREIGN KEY (ALARM_MESSAGE_ID) REFERENCES ALARM_MESSAGES (ALARM_MESSAGE_ID)  
)
GO

CREATE TABLE visualized_alarms
(
	ALARM_ID INT NOT NULL,
	EMPLOYEE_ID INT NOT NULL,
	CONSTRAINT PK_VISUALIZED_ALARM PRIMARY KEY (ALARM_ID, EMPLOYEE_ID),
	CONSTRAINT FK_VISUALIZED_ALARM_ALARMS FOREIGN KEY (ALARM_ID) REFERENCES ALARMS (ALARM_ID),
	CONSTRAINT FK_VISUALIZED_ALARM_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE users_alarm_type
(
  ALARM_TYPE_ID smallint NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  VISUALIZE bit DEFAULT 1 NOT NULL,
  DEACTIVATES bit DEFAULT 0 NOT NULL,
  CONSTRAINT PK_USER_ALARM_TYPE PRIMARY KEY (ALARM_TYPE_ID,EMPLOYEE_ID),
  CONSTRAINT FK_USER_ALARM_TYPE_ALARM_TYPE FOREIGN KEY (ALARM_TYPE_ID) REFERENCES ALARM_TYPES (ALARM_TYPE_ID),
  CONSTRAINT FK_USER_ALARM_TYPE_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)  
)
GO

/*ADJUSTMENT INVENTORY*/
CREATE TABLE adjustment_types
(
	ADJUSTMENT_TYPE_ID SMALLINT NOT NULL IDENTITY(1,1),
	ADJUSTMENT_TYPE_NAME VARCHAR(30) NOT NULL,
	OPERATOR SMALLINT NOT NULL,
	CONSTRAINT PK_ADJUSTMENT_TYPE PRIMARY KEY (ADJUSTMENT_TYPE_ID),
	CONSTRAINT UQ_ADJUSTMENT_TYPE_NAME UNIQUE (ADJUSTMENT_TYPE_NAME),
	CONSTRAINT CK_ADJUSTMENT_TYPE_OPERATOR CHECK (OPERATOR IN (-1,1))
)
GO

CREATE TABLE adjustments
(
  ADJUSTMENT_ID INT NOT NULL IDENTITY(1,1),
  ADJUSTMENT_DATE DATE DEFAULT GETDATE() NOT NULL,
  ADJUSTMENT_REASON_ID SMALLINT NOT NULL,
  ADJUSTMENT_TYPE_ID SMALLINT NOT NULL,  
  EMPLOYEE_ID INT NOT NULL,
  NOTES VARCHAR(250),
  CREATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  STATUS_DOCUMENT_TYPE_ID SMALLINT NOT NULL,
  CONSTRAINT PK_ADJUSTMENTS PRIMARY KEY (ADJUSTMENT_ID),
  CONSTRAINT FK_ADJUSTMENT_ADJUSTMENT_TYPE FOREIGN KEY (ADJUSTMENT_TYPE_ID) REFERENCES ADJUSTMENT_TYPES (ADJUSTMENT_TYPE_ID),
  CONSTRAINT FK_ADJUSTMENT_ADJUSTMENT_RESON FOREIGN KEY (ADJUSTMENT_REASON_ID) REFERENCES ADJUSTMENT_REASONS (ADJUSTMENT_REASON_ID),
  CONSTRAINT FK_ADJUSTMENT_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID),
  CONSTRAINT FK_ADJUSTMENT_STATUS_DOCUMENT_TYPE FOREIGN KEY (STATUS_DOCUMENT_TYPE_ID) REFERENCES STATUS_DOCUMENT_TYPES (STATUS_DOCUMENT_TYPE_ID)
)
GO

CREATE TABLE adjustment_details
(
  ADJUSTMENT_DETAIL_ID int NOT NULL IDENTITY(1,1),
  ADJUSTMENT_ID INT NOT NULL,
  REFERENCE_ID int NOT NULL,
  WAREHOUSE_ID SMALLINT NOT NULL,
  QUANTITY int NOT NULL,
  CONSTRAINT PK_ADJUSTMENT_DETAIL PRIMARY KEY (ADJUSTMENT_DETAIL_ID),
  CONSTRAINT FK_ADJUSTMENT_DETAIL_ADJUSTMENT FOREIGN KEY (ADJUSTMENT_ID) REFERENCES ADJUSTMENTS (ADJUSTMENT_ID),
  CONSTRAINT FK_ADJUSTMENT_DETAIL_ITEM_REFERENCES FOREIGN KEY (REFERENCE_ID) REFERENCES ITEM_REFERENCES (REFERENCE_ID),
  CONSTRAINT FK_ADJUSTMENT_DETAIL_WAREHOUSE FOREIGN KEY (WAREHOUSE_ID) REFERENCES WAREHOUSES (WAREHOUSE_ID),
  CONSTRAINT CK_ADJUSTMENT_DETAIL_QUANTITY CHECK (QUANTITY > 0),
  CONSTRAINT UQ_ADJUSTMENT_DETAIL UNIQUE (ADJUSTMENT_ID, REFERENCE_ID, WAREHOUSE_ID) 
)
GO

/* PURCHASE ORDERS */
CREATE TABLE purchase_orders
(
  PURCHASE_ORDER_ID int NOT NULL IDENTITY(1,1),
  ORDER_NUMBER varchar(10) NOT NULL,
  REQUEST_DATE DATE NOT NULL,
  EXPECTED_RECEIPT_DATE DATE NOT NULL,
  REAL_RECEIPT_DATE DATE,
  PROVIDER_ID int NOT NULL,
  FORWARDER_AGENT_ID int,
  SHIPMENT_FORWARDER_AGENT_METHOD_ID SMALLINT,
  EMPLOYEE_ID INT NOT NULL,
  STATUS_DOCUMENT_TYPE_ID SMALLINT NOT NULL,  
  IMPORT_NUMBER varchar(20),
  EMBARKATION_PORT varchar(50) DEFAULT ' ' NOT NULL,
  PROFORMA_NUMBER varchar(20) DEFAULT ' ' NOT NULL,
  CREATION_DATE DATETIME DEFAULT GETDATE()  NOT NULL,
  CONSTRAINT PK_PURCHASE_ORDER PRIMARY KEY (PURCHASE_ORDER_ID),
  CONSTRAINT UQ_PURCHASE_ORDER_ORDER_NUMBER UNIQUE (ORDER_NUMBER),
  CONSTRAINT FK_PURCHASE_ORDER_FORWARDER_AGENT FOREIGN KEY (FORWARDER_AGENT_ID) REFERENCES FORWARDER_AGENTS (FORWARDER_AGENT_ID),
  CONSTRAINT FK_PURCHASE_ORDER_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID),
  CONSTRAINT FK_PURCHASE_ORDER_PROVIDER FOREIGN KEY (PROVIDER_ID) REFERENCES PROVIDERS (PROVIDER_ID),
  CONSTRAINT FK_PURCHASE_ORDER_SHIPMENT_FORWARDER_AGENT_METHOD FOREIGN KEY (SHIPMENT_FORWARDER_AGENT_METHOD_ID) REFERENCES SHIPMENT_FORWARDER_AGENT_METHODS (SHIPMENT_FORWARDER_AGENT_METHOD_ID),
  CONSTRAINT CK_PURCHASE_ORDER_REAL_RECEIPT_DATE  check ((REAL_RECEIPT_DATE is null ) or (REQUEST_DATE <= REAL_RECEIPT_DATE))
)
GO

CREATE TABLE purchase_order_details
(
  PURCHASE_ORDER_DETAIL_ID INT NOT NULL IDENTITY(1,1),
  PURCHASE_ORDER_ID INT NOT NULL,
  REFERENCE_ID INT NOT NULL,
  WAREHOUSE_ID SMALLINT NOT NULL,
  RECEIVED_QUANTITY INT,
  REQUESTED_QUANTITY INT DEFAULT 0 NOT NULL,  
  CONSTRAINT PK_PURCHASE_ORDER_DETAILS PRIMARY KEY (PURCHASE_ORDER_DETAIL_ID),
  CONSTRAINT FK_PURCHASE_ORDER_DETAILS_PURCHASE_ORDER FOREIGN KEY (PURCHASE_ORDER_ID) REFERENCES PURCHASE_ORDERS (PURCHASE_ORDER_ID),
  CONSTRAINT FK_PURCHASE_ORDER_DETAILS_ITEM_REFERENCE FOREIGN KEY (REFERENCE_ID) REFERENCES ITEM_REFERENCES (REFERENCE_ID),
  CONSTRAINT FK_PURCHASE_ORDER_DETAILS_ITEM_WAREHOUSE FOREIGN KEY (WAREHOUSE_ID) REFERENCES WAREHOUSES (WAREHOUSE_ID), 	
  CONSTRAINT CK_PURCHASE_ORDER_DETAILS_RECEIVED_QUANTITY CHECK (RECEIVED_QUANTITY >= 0),
  CONSTRAINT CK_PURCHASE_ORDER_DETAILS_REQUESTED_QUANTITY CHECK (REQUESTED_QUANTITY > 0)  
)
GO

CREATE TABLE purchase_order_activities
(
  PURCHASE_ORDER_ACTIVITY_ID int NOT NULL IDENTITY(1,1),
  PURCHASE_ORDER_ID int NOT NULL,
  EXECUTION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  ACTIVITY_DESCRIPTION varchar(500) NOT NULL,
  CREATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  ACTIVITY_EMPLOYEE_ID INT NOT NULL,
  CONSTRAINT PK_ACTORDEN PRIMARY KEY (PURCHASE_ORDER_ACTIVITY_ID),
  CONSTRAINT FK_PURCHASE_ORDER_ACTIVITY_PURCHASE_ORDER FOREIGN KEY (PURCHASE_ORDER_ID) REFERENCES PURCHASE_ORDERS (PURCHASE_ORDER_ID),
  CONSTRAINT FK_PURCHASE_ORDER_ACTIVITY_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID),  
  CONSTRAINT FK_PURCHASE_ORDER_ACTIVITY_ACTIVITY_EMPLOYEE FOREIGN KEY (ACTIVITY_EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE canceled_purchase_orders
(
  PURCHASE_ORDER_ID int NOT NULL,
  CANCELLATION_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  CANCELLATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_CANCELED_PURCHASE_ORDER PRIMARY KEY (PURCHASE_ORDER_ID),
  CONSTRAINT FK_CANCELED_PURCHASE_ORDER_PURCHASE_ORDER FOREIGN KEY (PURCHASE_ORDER_ID) REFERENCES PURCHASE_ORDERS (PURCHASE_ORDER_ID),
  CONSTRAINT FK_CANCELED_PURCHASE_ORDER_CANCELLATION FOREIGN KEY (CANCELLATION_REASON_ID) REFERENCES CANCELLATION_REASONS (CANCELLATION_REASON_ID),
  CONSTRAINT FK_CANCELED_PURCHASE_ORDER_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)  
)
GO

CREATE TABLE modified_purchase_orders
(
  MODIFIED_PURCHASE_ORDER_ID INT NOT NULL IDENTITY(1,1),
  PURCHASE_ORDER_ID int NOT NULL,
  MODIFICATION_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  MODIFICATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_MODIFIED_PURCHASE_ORDER PRIMARY KEY (MODIFIED_PURCHASE_ORDER_ID),
  CONSTRAINT FK_MODIFIED_PURCHASE_ORDER_PURCHASE_ORDER FOREIGN KEY (PURCHASE_ORDER_ID) REFERENCES PURCHASE_ORDERS (PURCHASE_ORDER_ID),
  CONSTRAINT FK_MODIFIED_PURCHASE_ORDER_MODIFICATION_REASON FOREIGN KEY (MODIFICATION_REASON_ID) REFERENCES MODIFICATION_REASONS (MODIFICATION_REASON_ID),
  CONSTRAINT FK_MODIFIED_PURCHASE_ORDER_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)  
)
GO

/*CUSTOMER ORDERS*/
CREATE TABLE customer_orders
(
  CUSTOMER_ORDER_ID INT NOT NULL IDENTITY(1,1),
  CUSTOMER_ID INT NOT NULL,
  ORDER_NUMBER VARCHAR(10) NOT NULL,
  ORDER_DATE DATE NOT NULL,
  ESTIMATED_DELIVERY_DATE DATE NOT NULL,
  INTERNAL_NOTES VARCHAR(250),
  EMPLOYEE_ID INT NOT NULL,
  STATUS_DOCUMENT_TYPE_ID SMALLINT NOT NULL,
  CREATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CUSTOMER_NOTES VARCHAR(250),
  CONSTRAINT PK_CUSTOMER_ORDER PRIMARY KEY (CUSTOMER_ORDER_ID),
  CONSTRAINT UQ_CUSTOMER_ORDER_NUMBER UNIQUE (ORDER_NUMBER),
  CONSTRAINT FK_CUSTOMER_ORDER_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID),
  CONSTRAINT FK_CUSTOMER_ORDER_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID),
  CONSTRAINT FK_CUSTOMER_ORDER_STATUS_DOCUMENT_TYPE FOREIGN KEY (STATUS_DOCUMENT_TYPE_ID) REFERENCES STATUS_DOCUMENT_TYPES (STATUS_DOCUMENT_TYPE_ID),
  CONSTRAINT CK_CUSTOMER_ORDER_DATES CHECK (ORDER_DATE <= ESTIMATED_DELIVERY_DATE)
)
GO

CREATE TABLE customer_order_details
(
  CUSTOMER_ORDER_DETAIL_ID INT NOT NULL IDENTITY(1,1),
  CUSTOMER_ORDER_ID INT NOT NULL,
  REFERENCE_ID INT NOT NULL,
  REQUESTED_QUANTITY INT NOT NULL,
  PROCESSED_QUANTITY INT DEFAULT 0 NOT NULL,
  DELIVERED_QUANTITY INT DEFAULT 0 NOT NULL,
  BRAND VARCHAR(250),
  CONSTRAINT PK_CUSTOMER_ORDER_DETAIL PRIMARY KEY (CUSTOMER_ORDER_DETAIL_ID),
  CONSTRAINT FK_CUSTOMER_ORDER_DETAIL_CUSTOMER_ORDER FOREIGN KEY (CUSTOMER_ORDER_ID) REFERENCES CUSTOMER_ORDERS (CUSTOMER_ORDER_ID),
  CONSTRAINT FK_CUSTOMER_ORDER_DETAIL_ITEM_REFERENCE FOREIGN KEY (REFERENCE_ID) REFERENCES ITEM_REFERENCES(REFERENCE_ID),
  CONSTRAINT CK_CUSTOMER_ORDER_DETAIL_QUANTITY CHECK ((REQUESTED_QUANTITY >= PROCESSED_QUANTITY) AND (REQUESTED_QUANTITY >= PROCESSED_QUANTITY + DELIVERED_QUANTITY))  
)
GO

CREATE TABLE customer_order_activities
(
  CUSTOMER_ORDER_ACTIVITY_ID INT NOT NULL IDENTITY(1,1),
  CUSTOMER_ORDER_ID INT NOT NULL,
  AREA_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  ACTIVITY_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  NOTES VARCHAR(255),
  CONSTRAINT PK_CUSTOMER_ORDER_ACTIVITY PRIMARY KEY (CUSTOMER_ORDER_ACTIVITY_ID),
  CONSTRAINT FK_CUSTOMER_ORDER_ACTIVITY_CUSTOMER_ORDER FOREIGN KEY (CUSTOMER_ORDER_ID) REFERENCES CUSTOMER_ORDERS (CUSTOMER_ORDER_ID),
  CONSTRAINT FK_CUSTOMER_ORDER_ACTIVITY_AREA FOREIGN KEY (AREA_ID) REFERENCES AREAS (AREA_ID),
  CONSTRAINT FK_CUSTOMER_ORDER_ACTIVITY_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE customer_order_activity_details
(
	CUSTOMER_ORDER_ACTIVITY_DETAIL_ID INT NOT NULL IDENTITY(1,1),
	CUSTOMER_ORDER_ACTIVITY_ID INT NOT NULL,
	ACTIVITY_TYPE_ID SMALLINT NOT NULL,
	EMPLOYEE_ID INT NOT NULL,
	ACTIVITY_EMPLOYEE_ID INT NOT NULL, 
	CONSTRAINT PK_CUSTOMER_ORDER_ACTIVITY_DETAIL PRIMARY KEY (CUSTOMER_ORDER_ACTIVITY_DETAIL_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_ACTIVITY_CUSTOMER_ORDER_ACTIVITY FOREIGN KEY (CUSTOMER_ORDER_ACTIVITY_ID) REFERENCES CUSTOMER_ORDER_ACTIVITIES (CUSTOMER_ORDER_ACTIVITY_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_ACTIVITY_ACTIVITY_TYPE FOREIGN KEY (ACTIVITY_TYPE_ID) REFERENCES ACTIVITY_TYPES (ACTIVITY_TYPE_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_ACTIVITY_DETAIL_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID), 
	CONSTRAINT FK_CUSTOMER_ORDER_ACTIVITY_DETAIL_ACTIVITY_EMPLOYEE FOREIGN KEY (ACTIVITY_EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID), 
	CONSTRAINT UQ_CUSTOMER_ORDER_ACTIVITY UNIQUE (CUSTOMER_ORDER_ACTIVITY_ID, ACTIVITY_TYPE_ID)
)
GO

CREATE TABLE canceled_customer_orders
(
  CUSTOMER_ORDER_ID int NOT NULL,
  CANCELLATION_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  CANCELLATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_CANCELED_CUSTOMER_ORDER PRIMARY KEY (CUSTOMER_ORDER_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_ORDER_CUSTOMER_ORDER FOREIGN KEY (CUSTOMER_ORDER_ID) REFERENCES CUSTOMER_ORDERS (CUSTOMER_ORDER_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_ORDER_CANCELLATION FOREIGN KEY (CANCELLATION_REASON_ID) REFERENCES CANCELLATION_REASONS (CANCELLATION_REASON_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_ORDER_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE modified_customer_orders
(
  MODIFIED_CUSTOMER_ORDER_ID INT NOT NULL IDENTITY(1,1),
  CUSTOMER_ORDER_ID int NOT NULL,
  MODIFICATION_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  MODIFICATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_MODIFIED_CUSTOMER_ORDER PRIMARY KEY (MODIFIED_CUSTOMER_ORDER_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_ORDER_CUSTOMER_ORDER FOREIGN KEY (CUSTOMER_ORDER_ID) REFERENCES CUSTOMER_ORDERS (CUSTOMER_ORDER_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_ORDER_MODIFICATION_REASON FOREIGN KEY (MODIFICATION_REASON_ID) REFERENCES MODIFICATION_REASONS (MODIFICATION_REASON_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_ORDER_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE close_customer_order_reasons
(
	CLOSE_CUSTOMER_ORDER_REASON_ID SMALLINT NOT NULL IDENTITY(1,1),
	CLOSE_REASON_NAME VARCHAR(30) NOT NULL,
	CLOSE_REASON_NOTES VARCHAR(250),
	CONSTRAINT PK_CLOSE_CUSTOMER_ORDER_REASON PRIMARY KEY (CLOSE_CUSTOMER_ORDER_REASON_ID),
	CONSTRAINT UQ_CLOSE_CUSTOMER_ORDER_REASON_NAME UNIQUE (CLOSE_REASON_NAME)
)
GO

CREATE TABLE closed_customer_orders
(
  CLOSED_CUSTOMER_ORDER_ID INT NOT NULL IDENTITY(1,1),
  CUSTOMER_ORDER_ID int NOT NULL,
  CLOSE_CUSTOMER_ORDER_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  CLOSE_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_CLOSED_CUSTOMER_ORDER PRIMARY KEY (CLOSED_CUSTOMER_ORDER_ID),
  CONSTRAINT FK_CLOSED_CUSTOMER_ORDER_CUSTOMER_ORDER FOREIGN KEY (CUSTOMER_ORDER_ID) REFERENCES CUSTOMER_ORDERS (CUSTOMER_ORDER_ID),
  CONSTRAINT FK_CLOSED_CUSTOMER_ORDER_CLOSE_CUSTOMER_ORDER_REASON FOREIGN KEY (CLOSE_CUSTOMER_ORDER_REASON_ID) REFERENCES CLOSE_CUSTOMER_ORDER_REASONS (CLOSE_CUSTOMER_ORDER_REASON_ID),
  CONSTRAINT FK_CLOSED_CUSTOMER_ORDER_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

/* CUSTOMER RESERVATIONS */
CREATE TABLE customer_reservations
(
  CUSTOMER_RESERVATION_ID INT NOT NULL IDENTITY(1,1),
  CUSTOMER_ID INT NOT NULL,
  RESERVATION_NUMBER VARCHAR(10) NOT NULL,
  RESERVATION_DATE DATE NOT NULL,
  EXPIRATION_DATE DATE NOT NULL,
  NOTES VARCHAR(250),
  EMPLOYEE_ID INT NOT NULL,
  CUSTOMER_ORDER_ID INT,
  STATUS_DOCUMENT_TYPE_ID SMALLINT NOT NULL,
  CREATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,  
  CONSTRAINT PK_CUSTOMER_RESERVATION PRIMARY KEY (CUSTOMER_RESERVATION_ID),
  CONSTRAINT FK_CUSTOMER_RESERVATION_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID),
  CONSTRAINT FK_CUSTOMER_RESERVATION_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID),
  CONSTRAINT FK_CUSTOMER_RESERVATION_STATUS_DOCUMENT_TYPE FOREIGN KEY (STATUS_DOCUMENT_TYPE_ID) REFERENCES STATUS_DOCUMENT_TYPES (STATUS_DOCUMENT_TYPE_ID),
  CONSTRAINT UQ_CUSTOMER_RESERVATION_RESERVATION_NUMBER UNIQUE (RESERVATION_NUMBER),
  CONSTRAINT FK_CUSTOMER_RESERVATION_CUSTOMER_ORDER FOREIGN KEY (CUSTOMER_ORDER_ID) REFERENCES CUSTOMER_ORDERS (CUSTOMER_ORDER_ID),
  CONSTRAINT CK_CUSTOMER_RESERVATION_DATES CHECK (RESERVATION_DATE <= EXPIRATION_DATE)
)
GO

CREATE TABLE customer_reservation_details
(
  CUSTOMER_RESERVATION_DETAIL_ID INT NOT NULL IDENTITY(1,1),
  CUSTOMER_RESERVATION_ID INT NOT NULL,
  REFERENCE_ID INT NOT NULL,
  RESERVED_QUANTITY integer NOT NULL,
  BRAND varchar(250),
  SEND_TO_CUSTOMER_ORDER BIT DEFAULT 0 NOT NULL,
  CONSTRAINT PK_ITEMRESERVAS PRIMARY KEY (CUSTOMER_RESERVATION_DETAIL_ID),
  CONSTRAINT FK_CUSTOMER_RESERVATION_DETAILS_CUSTOMER_RESERVATION FOREIGN KEY (CUSTOMER_RESERVATION_ID) REFERENCES CUSTOMER_RESERVATIONS(CUSTOMER_RESERVATION_ID),
  CONSTRAINT FK_CUSTOMER_RESERVATION_DETAILS_REFERENCE FOREIGN KEY (REFERENCE_ID) REFERENCES ITEM_REFERENCES(REFERENCE_ID),
  CONSTRAINT CK_RESERVED_QUANTITY CHECK (RESERVED_QUANTITY > 0)
)
GO

CREATE TABLE canceled_customer_reservations
(
  CUSTOMER_RESERVATION_ID int NOT NULL,
  CANCELLATION_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  CANCELLATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_CANCELED_CUSTOMER_RESERVATION PRIMARY KEY (CUSTOMER_RESERVATION_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_RESERVATION_CUSTOMER_RESERVATION FOREIGN KEY (CUSTOMER_RESERVATION_ID) REFERENCES CUSTOMER_RESERVATIONS (CUSTOMER_RESERVATION_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_RESERVATION_CANCELLATION FOREIGN KEY (CANCELLATION_REASON_ID) REFERENCES CANCELLATION_REASONS (CANCELLATION_REASON_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_RESERVATION_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE modified_customer_reservations
(
  MODIFIED_CUSTOMER_RESERVATION_ID INT NOT NULL IDENTITY(1,1),
  CUSTOMER_RESERVATION_ID int NOT NULL,
  MODIFICATION_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  MODIFICATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_MODIFIED_CUSTOMER_RESERVATION PRIMARY KEY (MODIFIED_CUSTOMER_RESERVATION_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_RESERVATION_CUSTOMER_RESERVATION FOREIGN KEY (CUSTOMER_RESERVATION_ID) REFERENCES CUSTOMER_RESERVATIONS (CUSTOMER_RESERVATION_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_RESREVATION_MODIFICATION_REASON FOREIGN KEY (MODIFICATION_REASON_ID) REFERENCES MODIFICATION_REASONS (MODIFICATION_REASON_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_RESREVATION_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE customer_orders_in_process
(
	CUSTOMER_ORDER_IN_PROCESS_ID INT NOT NULL IDENTITY(1,1),
	CUSTOMER_ORDER_ID INT NOT NULL, 
	PROCESS_DATE DATE DEFAULT GETDATE() NOT NULL,
	NOTES VARCHAR(250), 
	PROCESS_SATELLITE_ID INT NOT NULL,
    TRANSFER_DATETIME DATETIME DEFAULT GETDATE() NOT NULL,
	EMPLOYEE_RECIPIENT_ID INT NOT NULL, 
	CREATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
	STATUS_DOCUMENT_TYPE_ID SMALLINT NOT NULL,
	EMPLOYEE_ID INT NOT NULL,
	CONSTRAINT PK_CUSTOMER_ORDER_IN_PROCESS PRIMARY KEY (CUSTOMER_ORDER_IN_PROCESS_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_IN_PROCESS_CUSTOMER_ORDER FOREIGN KEY (CUSTOMER_ORDER_ID) REFERENCES CUSTOMER_ORDERS (CUSTOMER_ORDER_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_IN_PROCESS_PROCESS_SATELLITE FOREIGN KEY (PROCESS_SATELLITE_ID) REFERENCES PROCESS_SATELLITES (PROCESS_SATELLITE_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_IN_PROCESS_EMPLOYEE_RECIPIENT FOREIGN KEY (EMPLOYEE_RECIPIENT_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_IN_PROCESS_STATUS_DOCUMENT_TYPE FOREIGN KEY (STATUS_DOCUMENT_TYPE_ID) REFERENCES STATUS_DOCUMENT_TYPES (STATUS_DOCUMENT_TYPE_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_IN_PROCESS_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE customer_order_in_process_details
(	
	CUSTOMER_ORDER_IN_PROCESS_DETAIL_ID INT NOT NULL IDENTITY(1,1), 
	CUSTOMER_ORDER_IN_PROCESS_ID INT NOT NULL, 
	CUSTOMER_ORDER_DETAIL_ID INT NOT NULL,
	WAREHOUSE_ID SMALLINT NOT NULL,
    PROCESSED_QUANTITY INT NOT NULL,
	BRAND VARCHAR(250),
	CONSTRAINT PK_CUSTMER_ORDER_IN_PROCESS_DETAIL PRIMARY KEY (CUSTOMER_ORDER_IN_PROCESS_DETAIL_ID),
	CONSTRAINT FK_CUSTMER_ORDER_IN_PROCESS_DETAIL_ORDER_IN_PROCESS FOREIGN KEY (CUSTOMER_ORDER_IN_PROCESS_ID) REFERENCES CUSTOMER_ORDERS_IN_PROCESS (CUSTOMER_ORDER_IN_PROCESS_ID),
	CONSTRAINT FK_CUSTMER_ORDER_IN_PROCESS_DETAIL_CUSTOMER_ORDER_DETAIL FOREIGN KEY (CUSTOMER_ORDER_DETAIL_ID) REFERENCES CUSTOMER_ORDER_DETAILS (CUSTOMER_ORDER_DETAIL_ID),
	CONSTRAINT FK_CUSTMER_ORDER_IN_PROCESS_DETAIL_WAREHOUSES FOREIGN KEY (WAREHOUSE_ID) REFERENCES WAREHOUSES (WAREHOUSE_ID),
	CONSTRAINT UQ_CUSTMER_ORDER_IN_PROCESS_DETAIL UNIQUE (CUSTOMER_ORDER_IN_PROCESS_ID, CUSTOMER_ORDER_DETAIL_ID),
	CONSTRAINT CK_CUSTMER_ORDER_IN_PROCESS_PROCESSED_QUANTITY CHECK (PROCESSED_QUANTITY > 0)
)
GO

CREATE TABLE canceled_orders_in_process
(
  CUSTOMER_ORDER_IN_PROCESS_ID int NOT NULL,
  CANCELLATION_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  CANCELLATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_CANCELED_CUSTOMER_ORDER_IN_PROCESS PRIMARY KEY (CUSTOMER_ORDER_IN_PROCESS_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_ORDER_IN_PROCESS_CUSTOMER_ORDER_IN_PROCESS FOREIGN KEY (CUSTOMER_ORDER_IN_PROCESS_ID) REFERENCES CUSTOMER_ORDERS_IN_PROCESS (CUSTOMER_ORDER_IN_PROCESS_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_ORDER_IN_PROCESS_CANCELLATION FOREIGN KEY (CANCELLATION_REASON_ID) REFERENCES CANCELLATION_REASONS (CANCELLATION_REASON_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_ORDER_IN_PROCESS_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE modified_orders_in_process
(
  MODIFIED_CUSTOMER_ORDER_IN_PROCESS_ID INT NOT NULL IDENTITY(1,1),
  CUSTOMER_ORDER_IN_PROCESS_ID int NOT NULL,
  MODIFICATION_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  MODIFICATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_MODIFIED_CUSTOMER_ORDER_IN_PROCESS PRIMARY KEY (MODIFIED_CUSTOMER_ORDER_IN_PROCESS_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_ORDER_IN_PROCESS_CUSTOMER_ORDER_IN_PROCESS FOREIGN KEY (CUSTOMER_ORDER_IN_PROCESS_ID) REFERENCES CUSTOMER_ORDERS_IN_PROCESS (CUSTOMER_ORDER_IN_PROCESS_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_ORDER_IN_PROCESS_MODIFICATION_REASON FOREIGN KEY (MODIFICATION_REASON_ID) REFERENCES MODIFICATION_REASONS (MODIFICATION_REASON_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_ORDER_IN_PROCESS_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE customer_order_shipments
(
	CUSTOMER_ORDER_SHIPMENT_ID INT NOT NULL IDENTITY(1,1),
	CUSTOMER_ORDER_ID INT NOT NULL, 
	SHIPPING_METHOD_ID SMALLINT NOT NULL, 
	NOTES VARCHAR(250),
    TRACKING_NUMBER VARCHAR(15),
	DELIVERY_NOTE VARCHAR(15) NOT NULL, 
	EMPLOYEE_ID INT NOT NULL, 
	SHIPPING_DATE DATE DEFAULT GETDATE() NOT NULL, 
	CREATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
	STATUS_DOCUMENT_TYPE_ID SMALLINT not null,
	CONSTRAINT PK_CUSTOMER_ORDER_SHIPMENT PRIMARY KEY (CUSTOMER_ORDER_SHIPMENT_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_SHIPMENT_CUSTOMER_ORDER FOREIGN KEY (CUSTOMER_ORDER_ID) REFERENCES CUSTOMER_ORDERS (CUSTOMER_ORDER_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_SHIPMENT_SHIPPING_METHOD FOREIGN KEY (SHIPPING_METHOD_ID) REFERENCES SHIPPING_METHODS (SHIPPING_METHOD_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_SHIPMENT_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID),
	CONSTRAINT FK_CUSTOMER_ORDER_SHIPMENT_STATUS_DOCUMENT_TYPE FOREIGN KEY (STATUS_DOCUMENT_TYPE_ID) REFERENCES STATUS_DOCUMENT_TYPES (STATUS_DOCUMENT_TYPE_ID)
)
GO

CREATE TABLE customer_order_shipment_details
(
	CUSTOMER_ORDER_SHIPMENT_DETAIL_ID INT NOT NULL IDENTITY(1,1),
	CUSTOMER_ORDER_SHIPMENT_ID INT NOT NULL,
	CUSTOMER_ORDER_DETAIL_ID INT NOT NULL,
    DELIVERED_QUANTITY INT NOT NULL,
	CONSTRAINT PK_CUSTMER_ORDER_SHIPMENT_DETAIL PRIMARY KEY (CUSTOMER_ORDER_SHIPMENT_DETAIL_ID),
	CONSTRAINT FK_CUSTMER_ORDER_SHIPMENT_DETAIL_ORDER_IN_PROCESS FOREIGN KEY (CUSTOMER_ORDER_SHIPMENT_ID) REFERENCES CUSTOMER_ORDER_SHIPMENTS (CUSTOMER_ORDER_SHIPMENT_ID),
	CONSTRAINT FK_CUSTMER_ORDER_SHIPMENT_DETAIL_CUSTOMER_ORDER_DETAIL FOREIGN KEY (CUSTOMER_ORDER_DETAIL_ID) REFERENCES CUSTOMER_ORDER_DETAILS (CUSTOMER_ORDER_DETAIL_ID),
	CONSTRAINT UQ_CUSTMER_ORDER_SHIPMENT_DETAIL UNIQUE (CUSTOMER_ORDER_SHIPMENT_ID, CUSTOMER_ORDER_DETAIL_ID),
	CONSTRAINT CK_CUSTMER_ORDER_SHIPMENT_DELIVERED_QUANTITY CHECK (DELIVERED_QUANTITY>0)
)
GO

CREATE TABLE canceled_order_shipment
(
  CUSTOMER_ORDER_SHIPMENT_ID int NOT NULL,
  CANCELLATION_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  CANCELLATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_CANCELED_CUSTOMER_ORDER_SHIPMENT PRIMARY KEY (CUSTOMER_ORDER_SHIPMENT_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_ORDER_SHIPMENT_CUSTOMER_ORDER_SHIPMENT FOREIGN KEY (CUSTOMER_ORDER_SHIPMENT_ID) REFERENCES CUSTOMER_ORDER_SHIPMENTS (CUSTOMER_ORDER_SHIPMENT_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_ORDER_SHIPMENT_CANCELLATION FOREIGN KEY (CANCELLATION_REASON_ID) REFERENCES CANCELLATION_REASONS (CANCELLATION_REASON_ID),
  CONSTRAINT FK_CANCELED_CUSTOMER_ORDER_SHIPMENT_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE modified_order_shipment
(
  MODIFIED_CUSTOMER_SHIPMENT_ID INT NOT NULL IDENTITY(1,1),
  CUSTOMER_ORDER_SHIPMENT_ID int NOT NULL,
  MODIFICATION_REASON_ID SMALLINT NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  MODIFICATION_DATE DATETIME DEFAULT GETDATE() NOT NULL,
  CONSTRAINT PK_MODIFIED_CUSTOMER_ORDER_SHIPMENT PRIMARY KEY (MODIFIED_CUSTOMER_SHIPMENT_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_ORDER_SHIPMENT_CUSTOMER_ORDER_IN_PROCESS FOREIGN KEY (CUSTOMER_ORDER_SHIPMENT_ID) REFERENCES CUSTOMER_ORDER_SHIPMENTS (CUSTOMER_ORDER_SHIPMENT_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_ORDER_SHIPMENT_MODIFICATION_REASON FOREIGN KEY (MODIFICATION_REASON_ID) REFERENCES MODIFICATION_REASONS (MODIFICATION_REASON_ID),
  CONSTRAINT FK_MODIFIED_CUSTOMER_ORDER_SHIPMENT_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
)
GO

CREATE TABLE warehouse_transfers
(
  WAREHOUSE_TRANSFER_ID INTEGER NOT NULL IDENTITY(1,1),
  TRANSFER_DATE DATE NOT NULL,
  EMPLOYEE_ID INT NOT NULL,
  ORIGIN_WAREHOUSE_ID SMALLINT NOT NULL,
  DESTINATION_WAREHOUSE_ID SMALLINT NOT NULL,
  NOTES VARCHAR(250),
  CREATION_DATE DATETIME DEFAULT GETDATE()  NOT NULL,
  NATIONALIZATION VARCHAR(30),
  STATUS_DOCUMENT_TYPE_ID SMALLINT NOT NULL
  CONSTRAINT PK_WAREHOUSE_TRANSFER PRIMARY KEY (WAREHOUSE_TRANSFER_ID),
  CONSTRAINT FK_WAREHOUSE_TRANSFER_ORIGIN_WAREHOUSE FOREIGN KEY (ORIGIN_WAREHOUSE_ID) REFERENCES WAREHOUSES(WAREHOUSE_ID), 
  CONSTRAINT FK_WAREHOUSE_TRANSFER_DESTINATION_WAREHOUSE FOREIGN KEY (DESTINATION_WAREHOUSE_ID) REFERENCES WAREHOUSES(WAREHOUSE_ID), 
  CONSTRAINT FK_WAREHOUSE_TRANSFER_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID), 
  CONSTRAINT FK_WAREHOUSE_TRANSFER_STATUS_DOCUMENT_TYPE FOREIGN KEY (STATUS_DOCUMENT_TYPE_ID) REFERENCES STATUS_DOCUMENT_TYPES (STATUS_DOCUMENT_TYPE_ID) 
)
GO

CREATE TABLE warehouse_transfer_details
(
  WAREHOUSE_TRANSFER_DETAIL_ID INT NOT NULL IDENTITY(1,1),
  WAREHOUSE_TRANSFER_ID INT NOT NULL,	
  REFERENCE_ID INT NOT NULL,
  QUANTITY INT NOT NULL,
  CONSTRAINT PK_WAREHOUSE_TRANSFER_DETAIL PRIMARY KEY (WAREHOUSE_TRANSFER_DETAIL_ID),
  CONSTRAINT FK_WAREHOUSE_TRANSFER_DETAIL_WAREHOUSE_TRANSFER FOREIGN KEY (WAREHOUSE_TRANSFER_ID) REFERENCES WAREHOUSE_TRANSFERS (WAREHOUSE_TRANSFER_ID),
  CONSTRAINT FK_WAREHOUSE_TRANSFER_DETAIL_ITEM_REFERENCE FOREIGN KEY (REFERENCE_ID) REFERENCES ITEM_REFERENCES (REFERENCE_ID)
)
GO

/* Notifications Configuration */

CREATE TABLE [dbo].[notification_provider_settings](
	[NOTIFICATION_PROVIDER_SETTING_ID] [smallint] IDENTITY(1,1) NOT NULL,
	[SUBJECT] [varchar](20) NOT NULL,
	[SETTINGS] [ntext] NOT NULL,
	[ENABLED] [bit] NOT NULL,
 CONSTRAINT [PK_notification_provider_settings] PRIMARY KEY CLUSTERED 
(
	[NOTIFICATION_PROVIDER_SETTING_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[notification_templates](
	[NOTIFICATION_TEMPLATE_ID] [smallint] IDENTITY(1,1) NOT NULL,
	[NAME] [varchar](100) NOT NULL,
	[SUBJECT] [varchar](100) NOT NULL,
	[MESSAGE] [ntext] NOT NULL,
 CONSTRAINT [PK_templates] PRIMARY KEY CLUSTERED 
(
	[NOTIFICATION_TEMPLATE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET IDENTITY_INSERT [dbo].[notification_provider_settings] ON 
GO

CREATE SCHEMA [log]
GO

CREATE TABLE [log].[Logs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Message] [nvarchar](max) NULL,
	[MessageTemplate] [nvarchar](max) NULL,
	[Level] [nvarchar](max) NULL,
	[TimeStamp] [datetime] NULL,
	[Exception] [nvarchar](max) NULL,
	[Properties] [nvarchar](max) NULL,
	[Source] [nvarchar](100) NULL,
 CONSTRAINT [PK_Logs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/************creacion de indices*******************/

CREATE INDEX IND_ITEMS_LINE ON ITEMS (LINE_ID)
CREATE INDEX IND_ITEMS_NAME ON ITEMS (ITEM_NAME)
CREATE INDEX IND_ITEMS_INTERNAL_REFERENCE ON ITEMS (INTERNAL_REFERENCE)
CREATE INDEX IND_REFERENCES_ITEM_ID ON ITEM_REFERENCES (ITEM_ID)
CREATE INDEX IND_REFERENCES_REFERENCE_NAME ON ITEM_REFERENCES (REFERENCE_NAME)
CREATE INDEX IND_REFERENCES_INTERNAL_REFERENCE_CODE ON ITEM_REFERENCES (PROVIDER_REFERENCE_CODE)
CREATE INDEX IND_FORWARDER_CITY ON FORWARDERS (CITY_ID,FORWARDER_ID)
CREATE INDEX IND_FORWARDER_NAME ON FORWARDERS (CITY_ID,FORWARDER_NAME)
CREATE INDEX IND_CUSTOMER_CITY ON CUSTOMERS (CITY_ID,CUSTOMER_ID)
CREATE INDEX IND_CUSTOMER_CITY_IDENTITY_NUMBER ON CUSTOMERS (CITY_ID,IDENTITY_NUMBER)
CREATE INDEX IND_CUSTOMER_CITY_CUSTOMER_NAME ON CUSTOMERS (CITY_ID,CUSTOMER_NAME)
CREATE INDEX IND_PROVIDER_PROVIDER_NAME ON PROVIDERS (PROVIDER_NAME)
CREATE INDEX IND_PROVIDER_IDENTITY_NUMBER ON PROVIDERS (IDENTITY_NUMBER)
CREATE INDEX IND_SHIPPING_METHODS_NAME ON SHIPPING_METHODS (SHIPPING_METHOD_NAME)
CREATE INDEX IND_PURCHASE_ORDERS_CREATION_DATE ON PURCHASE_ORDERS (CREATION_DATE)
CREATE INDEX IND_PURCHASE_ORDERS_STATUS_DOCUMENT ON PURCHASE_ORDERS (STATUS_DOCUMENT_TYPE_ID) INCLUDE (ORDER_NUMBER, PROVIDER_ID)
CREATE INDEX IND_PURCHASE_ORDERS_REQUEST_DATE ON PURCHASE_ORDERS (REQUEST_DATE) INCLUDE (ORDER_NUMBER, PROVIDER_ID)
CREATE UNIQUE INDEX UQIND_PURCHASE_ORDER_DETAILS ON PURCHASE_ORDER_DETAILS (PURCHASE_ORDER_ID, REFERENCE_ID, WAREHOUSE_ID)
CREATE INDEX IND_PURCHASE_ORDERS_ACTIVITIIES_EXECUTION_DATE ON PURCHASE_ORDER_ACTIVITIES (PURCHASE_ORDER_ID, PURCHASE_ORDER_ACTIVITY_ID, EXECUTION_DATE) INCLUDE (ACTIVITY_DESCRIPTION)
CREATE INDEX IND_CUSTOMER_RESERVATIONS_ESTADO ON CUSTOMER_RESERVATIONS (STATUS_DOCUMENT_TYPE_ID)
CREATE INDEX IND_CUSTOMER_RESERVATIONS_CREATION_DATE ON CUSTOMER_RESERVATIONS (CREATION_DATE)
CREATE INDEX IND_CUSTOMER_RESERVATIONS_RESERVATION_DATE ON CUSTOMER_RESERVATIONS (RESERVATION_DATE)
CREATE INDEX IND_CUSTOMER_RESERVATIONS_CUSTOMER ON CUSTOMER_RESERVATIONS (CUSTOMER_ID)
CREATE INDEX IND_CUSTOMER_RESERVATIONS_CUSTOMER_ORDER ON CUSTOMER_RESERVATIONS (CUSTOMER_ORDER_ID)
CREATE INDEX IND_CUSTOMER_ORDER_ESTADO ON CUSTOMER_ORDERS (STATUS_DOCUMENT_TYPE_ID)
CREATE INDEX IND_CUSTOMER_ORDER_FECHAPEDIDO ON CUSTOMER_ORDERS (ORDER_DATE, CUSTOMER_ID, ORDER_NUMBER)
CREATE INDEX IND_CUSTOMER_ORDER_CUSTOMER ON CUSTOMER_ORDERS (CUSTOMER_ID)
CREATE INDEX IND_CUSTOMER_ORDER_ORDER_NUMBER ON CUSTOMER_ORDERS (ORDER_NUMBER)
CREATE INDEX IND_CUSTOMER_ORDER_CREACION_DATE ON CUSTOMER_ORDERS (CREATION_DATE)
CREATE UNIQUE INDEX UQIND_CUSTOMER_ORDER_DETAILS ON CUSTOMER_ORDER_DETAILS (CUSTOMER_ORDER_ID, REFERENCE_ID)
CREATE INDEX IND_CUSTOMER_ORDER_ACTIVITIES ON CUSTOMER_ORDER_ACTIVITIES (CUSTOMER_ORDER_ID, ACTIVITY_DATE)
CREATE INDEX IND_CUSTOMER_ORDERS_IN_PROCESS_PROCESS_DATE ON CUSTOMER_ORDERS_IN_PROCESS (CUSTOMER_ORDER_ID, PROCESS_DATE)
CREATE INDEX IND_WAREHOUSE_TRANSFER_DETAIL_REFERENCE ON WAREHOUSE_TRANSFER_DETAILS (WAREHOUSE_TRANSFER_ID, REFERENCE_ID)  
CREATE INDEX IND_MODIFIED_CUSTOMER_ORDER_DATE ON MODIFIED_CUSTOMER_ORDERS (MODIFICATION_DATE);  
CREATE INDEX IND_MODIFIED_PURCHASE_ORDER_DATE ON MODIFIED_PURCHASE_ORDERS (MODIFICATION_DATE);  
GO

/* Triggers */

/* Crea la referencia para tdas las bodegas, con saldoen 0 */
CREATE OR ALTER TRIGGER [DBO].[TRGINSERTREFERENCESWAREHOUSE]
   ON  [DBO].[ITEM_REFERENCES] 
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @IDREG INT, @TOTALREG INT, @REFERENCE_ID INT

	SELECT @IDREG=MIN(WAREHOUSE_ID), @TOTALREG=MAX(WAREHOUSE_ID) 
	  FROM WAREHOUSES WITH (NOLOCK)
	 
	SELECT @REFERENCE_ID = REFERENCE_ID
	  FROM INSERTED 
	  
	WHILE @IDREG <= @TOTALREG
	BEGIN
		IF NOT EXISTS(SELECT 1 
						FROM REFERENCES_WAREHOUSE 
					   WHERE WAREHOUSE_ID = @IDREG  
					     AND REFERENCE_ID = @REFERENCE_ID)
			INSERT INTO REFERENCES_WAREHOUSE (WAREHOUSE_ID, REFERENCE_ID, QUANTITY) 
				 VALUES (@IDREG, @REFERENCE_ID, 0)
		SET @IDREG = @IDREG+1
	END
END
GO

/* Reports Stored Procedures*/
CREATE OR ALTER PROCEDURE SP_GET_INVENTORY_ADJUSTMENT_REPORT
	@AdjustmentId INT = NULL,
	@AdjustmentDateFrom DATE = NULL,
	@AdjustmentDateTo DATE = NULL,
	@CreationDateFrom DATE = NULL,
	@CreationDateTo DATE = NULL,
	@AdjustmentTypeId SMALLINT = NULL,
    @AdjustmentReasonId SMALLINT = NULL,
	@EmployeeId INT = NULL,
	@ReferenceIds VARCHAR(MAX) = ''
AS
BEGIN
	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references

	SELECT a.ADJUSTMENT_ID AdjustmentId, a.ADJUSTMENT_DATE AdjustmentDate, a.CREATION_DATE CreationDate, b.ADJUSTMENT_TYPE_NAME AdjustmentType, c.ADJUSTMENT_REASON_NAME AdjustmentReason, 
		   d.FULL_NAME Employee, a.Notes, f.WAREHOUSE_ID WarehouseId, f.WAREHOUSE_NAME WarehouseName, i.LINE_ID LineId, i.LINE_CODE LineCode, i.LINE_NAME LineName, h.ITEM_ID ItemId, 
		   h.INTERNAL_REFERENCE InternalReference, h.ITEM_NAME ItemName, g.REFERENCE_ID ReferenceId, g.REFERENCE_CODE ReferenceCode, g.REFERENCE_NAME ReferenceName, e.QUANTITY AvailableAmount
	  FROM Adjustments a
	  JOIN adjustment_types b ON b.ADJUSTMENT_TYPE_ID = a.ADJUSTMENT_TYPE_ID 
	  JOIN adjustment_reasons c on c.ADJUSTMENT_REASON_ID = a.ADJUSTMENT_REASON_ID
	  JOIN employees d ON d.EMPLOYEE_ID = a.EMPLOYEE_ID 
	  JOIN adjustment_details e ON e.ADJUSTMENT_ID = a.ADJUSTMENT_ID
	  JOIN warehouses f ON f.WAREHOUSE_ID = E.WAREHOUSE_ID
	  JOIN item_references g ON g.REFERENCE_ID = e.REFERENCE_ID
	  JOIN items h on h.ITEM_ID = g.ITEM_ID
	  JOIN lines i ON i.LINE_ID = h.LINE_ID
     WHERE EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = g.REFERENCE_ID)
	   AND (a.ADJUSTMENT_ID = @AdjustmentId OR @AdjustmentId IS NULL)
	   AND (a.ADJUSTMENT_DATE BETWEEN @AdjustmentDateFrom AND @AdjustmentDateTo OR @AdjustmentDateFrom IS NULL)
	   AND (a.CREATION_DATE BETWEEN @CreationDateFrom AND @CreationDateTo OR @CreationDateFrom IS NULL)
	   AND (a.ADJUSTMENT_TYPE_ID = @AdjustmentTypeId OR @AdjustmentTypeId IS NULL)
	   AND (a.ADJUSTMENT_REASON_ID = @AdjustmentReasonId OR @AdjustmentReasonId IS NULL)
	   AND (a.EMPLOYEE_ID = @EmployeeId OR @EmployeeId IS NULL)	 
END 
GO

CREATE OR ALTER PROCEDURE SP_GET_IN_PROCESS_INVENTORY_REPORT
	@ReferenceIds VARCHAR(MAX)
AS
BEGIN
	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references

	SELECT l.LINE_ID LineId, l.LINE_CODE LineCode, l.LINE_NAME LineName, i.ITEM_ID ItemId, i.INTERNAL_REFERENCE InternalReference, i.ITEM_NAME ItemName, r.REFERENCE_ID ReferenceId, r.REFERENCE_NAME ReferenceName, 
		   r.WORK_IN_PROCESS_QUANTITY InProcessAmount, w.WAREHOUSE_ID WarehouseId, w.WAREHOUSE_NAME WarehouseName, rw.QUANTITY Amount
	  FROM Lines l
	  JOIN Items i ON I.LINE_ID = l.LINE_ID
	  JOIN item_references r ON r.ITEM_ID = i.ITEM_ID
	  JOIN references_warehouse rw ON rw.REFERENCE_ID = r.REFERENCE_ID
	  JOIN warehouses w ON w.WAREHOUSE_ID = rw.WAREHOUSE_ID
	 WHERE i.IS_ACTIVE=1
	   AND i.IS_EXTERNAL_INVENTORY=1
	   AND r.IS_ACTIVE=1
	   AND EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = r.REFERENCE_ID)  
END
GO

CREATE OR ALTER PROCEDURE SP_GET_INVENTORY_REPORT
	@ReferenceIds VARCHAR(MAX) = '',
	@LineId SMALLINT = NULL
AS
BEGIN
	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	DECLARE @PurchaseOrders Table 
		(
			EXPECTED_RECEIPT_DATE DATE, 
			WAREHOUSE_NAME VARCHAR(30), 
			REQUESTED_QUANTITY INT, 
			PURCHASE_ORDER_ID INT, 
			REFERENCE_ID INT, 
			EXECUTION_DATE DATE, 
			PURCHASE_ORDER_ACTIVITY_ID INT,
			ACTIVITY_DESCRIPTION VARCHAR(500)
		) 

	DECLARE @Inventory TABLE
	(	
		LineId SMALLINT, 
		LineName VARCHAR(30), 
		InternalReference VARCHAR(30), 
		ItemName VARCHAR(50), 
		ItemId INT, 
		ReferenceName VARCHAR(30), 
		AvailableAmount INT, 
		FreeZone INT, 
		ReferenceId INT
	)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references
			   	
	INSERT INTO @Inventory
		 SELECT c.LINE_ID LineId, c.LINE_NAME LineName, b.INTERNAL_REFERENCE InternalReference, b.ITEM_NAME ItemName, b.ITEM_ID ItemId, a.REFERENCE_NAME ReferenceName, 
			    (a.INVENTORY_QUANTITY - a.RESERVED_QUANTITY - a.ORDERED_QUANTITY) AvailableAmount, 
			    d.QUANTITY FreeZone, a.REFERENCE_ID ReferenceId 
		   FROM item_references a 
		   JOIN items b ON b.ITEM_ID = a.ITEM_ID AND b.IS_ACTIVE = 1 And b.IS_EXTERNAL_INVENTORY = 1
		   JOIN lines c ON c.LINE_ID = b.LINE_ID
		   JOIN references_warehouse d ON d.REFERENCE_ID = a.REFERENCE_ID
		   JOIN warehouses ZonaFranca ON ZonaFranca.WAREHOUSE_ID = d.WAREHOUSE_ID AND ZonaFranca.WAREHOUSE_CODE = 2 	  
		  WHERE a.IS_ACTIVE = 1 
		    AND EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = a.REFERENCE_ID)  
		    AND (c.LINE_ID = @LineId OR @LineId IS NULL)

	INSERT INTO @PurchaseOrders
		 SELECT a.EXPECTED_RECEIPT_DATE, d.WAREHOUSE_NAME, c.REQUESTED_QUANTITY, a.PURCHASE_ORDER_ID, c.REFERENCE_ID, e.EXECUTION_DATE, e.PURCHASE_ORDER_ACTIVITY_ID, e.ACTIVITY_DESCRIPTION 
		   FROM purchase_orders a
		   JOIN status_document_types b on b.STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID AND b.STATUS_ORDER = 1
		   JOIN purchase_order_details c on c.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
		   JOIN warehouses d ON d.WAREHOUSE_ID = c.WAREHOUSE_ID		   
		   LEFT OUTER JOIN purchase_order_activities e on e.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
          WHERE EXISTS (SELECT 1 FROM @Inventory fr WHERE fr.ReferenceId = c.REFERENCE_ID) 		    
		  		   
	SELECT LineId, LineName, InternalReference, ItemName, ItemId, ReferenceName, AvailableAmount, FreeZone, ReferenceId,
		   e.EXPECTED_RECEIPT_DATE OrderDate, e.WAREHOUSE_NAME Warehouse, e.REQUESTED_QUANTITY Total, 
		   e.PURCHASE_ORDER_ID PurchaseOrderId, e.EXECUTION_DATE ActivityDate, e.ACTIVITY_DESCRIPTION Description, e.PURCHASE_ORDER_ACTIVITY_ID ActivityId
	  FROM @Inventory a
	  LEFT OUTER JOIN @PurchaseOrders e on e.REFERENCE_ID = a.ReferenceId
END
GO

CREATE OR ALTER PROCEDURE SP_GET_PROVIDER_REFERENCE_REPORT
	@ProviderId INT = NULL,
	@ReferenceIds VARCHAR(MAX) = '' 
AS
BEGIN

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references

	SELECT a.PROVIDER_ID ProviderId, a.PROVIDER_CODE ProviderCode, a.PROVIDER_NAME ProviderName, a.PROVIDER_ADDRESS ProviderAddress, a.PHONE, a.FAX, a.EMAIL, a.CONTACT_PERSON ContactPerson,
		   e.LINE_ID LineId, e.LINE_CODE LineCode, e.LINE_NAME LineName, d.ITEM_ID ItemId, d.INTERNAL_REFERENCE InternalReference, d.ITEM_NAME ItemName, c.REFERENCE_ID ReferenceId,
		   c.REFERENCE_CODE ReferenceCode, c.REFERENCE_NAME ReferenceName, C.PROVIDER_REFERENCE_NAME ProviderReferenceName, c.ORDERED_QUANTITY ConfirmedAmount, c.RESERVED_QUANTITY ReservedAmount,
		   c.INVENTORY_QUANTITY AvailableAmount, f.QUANTITY Amount, g.WAREHOUSE_ID WarehouseId, g.WAREHOUSE_NAME WarehouseName
	  FROM providers a
	  JOIN provider_references b ON b.PROVIDER_ID = a.PROVIDER_ID
	  JOIN item_references c ON c.REFERENCE_ID = b.REFERENCE_ID 
	  JOIN items d ON d.ITEM_ID = c.ITEM_ID
	  JOIN lines e ON e.LINE_ID = d.LINE_ID
	  JOIN references_warehouse f ON f.REFERENCE_ID = c.REFERENCE_ID
	  JOIN warehouses g ON g.WAREHOUSE_ID = f.WAREHOUSE_ID
	 WHERE EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = c.REFERENCE_ID)
	   AND (a.PROVIDER_ID = @ProviderId OR @ProviderId IS NULL)
	
END
GO

CREATE OR ALTER PROCEDURE SP_GET_REFERENCE_MOVEMENT_REPORT
	@ReferenceIds VARCHAR(MAX) = '' 
AS
BEGIN	

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references
			   
	SELECT c.LINE_ID LineId, c.LINE_CODE LineCode, c.LINE_NAME LineName, b.ITEM_ID ItemId, b.INTERNAL_REFERENCE InternalReference, b.ITEM_NAME ItemName, a.REFERENCE_ID ReferenceId, 
		   a.REFERENCE_CODE ReferenceCode, a.REFERENCE_NAME ReferenceName, a.RESERVED_QUANTITY ReservedQuantity, a.ORDERED_QUANTITY RequestedQuantity, e.WAREHOUSE_ID WarehouseId,
		   e.WAREHOUSE_NAME WarehouseName, d.QUANTITY Amount
	  FROM item_references a
	  JOIN items b ON b.ITEM_ID = a.ITEM_ID AND b.IS_EXTERNAL_INVENTORY = 1 and b.IS_ACTIVE = 1
	  JOIN lines c ON c.LINE_ID = b.LINE_ID
	  JOIN references_warehouse d ON d.REFERENCE_ID = a.REFERENCE_ID
	  JOIN warehouses e ON e.WAREHOUSE_ID = d.WAREHOUSE_ID
	 WHERE a.IS_ACTIVE = 1
	   AND EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = a.REFERENCE_ID)
END 
GO

CREATE OR ALTER PROCEDURE SP_GET_WAREHOUSE_STOCK_REPORT
	@ReferenceIds VARCHAR(MAX) = '', 
	@WarehouseId INT = NULL
AS
BEGIN	

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references

	SELECT b.WAREHOUSE_ID WarehouseId, b.WAREHOUSE_NAME WarehouseName, e.LINE_ID LineId, e.LINE_CODE LineCode, e.LINE_NAME LineName, d.ITEM_ID ItemId, d.INTERNAL_REFERENCE InternalReference, 
		   d.ITEM_NAME ItemName, c.REFERENCE_ID ReferenceId, c.REFERENCE_CODE ReferenceCode, c.REFERENCE_NAME ReferenceName, c.PROVIDER_REFERENCE_NAME ProviderReferenceName, 
		   a.QUANTITY AvailableAmount
	  FROM references_warehouse a
	  JOIN warehouses b ON b.WAREHOUSE_ID = a.WAREHOUSE_ID
	  JOIN item_references c ON c.REFERENCE_ID = a.REFERENCE_ID AND c.IS_ACTIVE = 1
	  JOIN items d ON d.ITEM_ID = c.ITEM_ID and d.IS_ACTIVE = 1
	  JOIN lines e ON e.LINE_ID = d.LINE_ID	  
	 WHERE EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = a.REFERENCE_ID)
	   AND (b.WAREHOUSE_ID = @WarehouseId OR @WarehouseId IS NULL)
END 
GO

CREATE OR ALTER PROCEDURE SP_GET_CUSTOMER_ORDER_REPORT
	@OrderNumber VARCHAR(10) = NULL,
	@CreationDateFrom DATE = NULL,
	@CreationDateTo DATE = NULL,
	@OrderDateFrom DATE = NULL,
	@OrderDateTo DATE = NULL,
	@EstimatedDeliveryDateFrom DATE = NULL,
	@EstimatedDeliveryDateTo DATE = NULL,
	@StatusDocumentTypeId SMALLINT = NULL,
    @CustomerId INT = NULL,
	@ReferenceIds VARCHAR(MAX) = ''
AS
BEGIN		
	DECLARE @FinishedStatus TABLE (STATUS_DOCUMENT_TYPE_ID INT)
	
	INSERT INTO @FinishedStatus
		 SELECT STATUS_DOCUMENT_TYPE_ID
		   FROM status_document_types a
		   JOIN document_types b ON b.DOCUMENT_TYPE_ID = a.DOCUMENT_TYPE_ID
		  WHERE DOCUMENT_TYPE_CODE = 'P' AND STATUS_ORDER IN (5,6)

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references

	DECLARE @CustomerOrders TABLE 
		( CustomerId INT, 
		  CustomerName VARCHAR(50), 
		  Phone VARCHAR(70), 
		  Fax VARCHAR(20),
		  OrderId INT, 
		  OrderNumber VARCHAR(20), 
		  OrderCreationDate DATE, 
		  OrderDate DATE, 
		  EstimatedDeliveryDate DATE, 
		  OrderStatus VARCHAR(30), 
		  InternalNotes VARCHAR(250), 
		  CustomerNotes VARCHAR(250), 
		  OrderDetailId INT,
		  OrderDetailItemReference VARCHAR(30), 
		  OrderDetailItemName VARCHAR(30), 
		  OrderDetailReferenceCode VARCHAR(30), 
		  OrderDetailReferenceName VARCHAR(30),
		  OrderDetailAmount INT, 
		  DeliveredAmount INT, 
		  InProcessAmount INT, 
		  DetailStatus VARCHAR(30))

	DECLARE @ShippingOrders TABLE
		( CustomerOrderDetailId INT, 
		  ShipmentId INT, 
		  ShipmentDate DATE, 
		  DeliveryNote VARCHAR(30), 
		  TrackingNumber VARCHAR(30), 
		  ShipmentMethodName VARCHAR(30), 
		  Notes VARCHAR(250), 
		  ShipmentDetailId INT, 
		  ShipmentDetailItemReference VARCHAR(30), 
		  ShipmentDetailItemName VARCHAR(30), 
		  ShipmentDetailReferenceCode VARCHAR(30), 
		  ShipmentDetailReferenceName VARCHAR(30), 
		  ShipmentDetailAmount INT)

	INSERT INTO @CustomerOrders
		 SELECT b.CUSTOMER_ID CustomerId, b.CUSTOMER_NAME CustomerName, (ISNULL(b.CELL_PHONE+', ','')+ISNULL(b.PHONE2+', ','')+ISNULL(b.PHONE1,'')) Phone, b.FAX Fax,
	 			a.CUSTOMER_ORDER_ID OrderId, a.ORDER_NUMBER OrderNumber, a.CREATION_DATE OrderCreationDate, a.ORDER_DATE OrderDate, a.ESTIMATED_DELIVERY_DATE EstimatedDeliveryDate, 
				c.STATUS_DOCUMENT_TYPE_NAME OrderStatus, a.INTERNAL_NOTES InternalNotes, a.CUSTOMER_NOTES CustomerNotes, D.CUSTOMER_ORDER_DETAIL_ID OrderDetailId,
				f.INTERNAL_REFERENCE OrderDetailItemReference, f.ITEM_NAME OrderDetailItemName, e.REFERENCE_CODE OrderDetailReferenceCode, e.REFERENCE_NAME OrderDetailReferenceName,
				d.REQUESTED_QUANTITY OrderDetailAmount, d.DELIVERED_QUANTITY DeliveredAmount, d.PROCESSED_QUANTITY InProcessAmount, 
				CASE 
					WHEN EXISTS (SELECT 1 FROM @FinishedStatus WHERE STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID) THEN 
						c.STATUS_DOCUMENT_TYPE_NAME
			 		WHEN d.DELIVERED_QUANTITY = 0 and d.PROCESSED_QUANTITY = 0 THEN 
					 'Pendiente'
					WHEN d.DELIVERED_QUANTITY = d.REQUESTED_QUANTITY THEN 
					 'Totalmente atendido'
					ELSE	
					 'Parcialmente atendido'
				END DetailStatus 
		   FROM customer_orders a
		   JOIN customers b ON b.CUSTOMER_ID = a.CUSTOMER_ID 
		   JOIN status_document_types c ON c.STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID
		   JOIN customer_order_details d ON d.CUSTOMER_ORDER_ID = a.CUSTOMER_ORDER_ID
		   JOIN item_references e ON e.REFERENCE_ID = d.REFERENCE_ID
		   JOIN items f ON f.ITEM_ID = e.ITEM_ID
		  WHERE EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = e.REFERENCE_ID)
		    AND (a.ORDER_NUMBER LIKE '%'+@OrderNumber+'%' OR @OrderNumber IS NULL)
			AND (a.CREATION_DATE BETWEEN @CreationDateFrom AND @CreationDateTo OR @CreationDateFrom IS NULL)
			AND (a.ORDER_DATE BETWEEN @OrderDateFrom AND @OrderDateTo OR @OrderDateFrom IS NULL)
			AND (a.ESTIMATED_DELIVERY_DATE BETWEEN @EstimatedDeliveryDateFrom AND @EstimatedDeliveryDateTo OR @EstimatedDeliveryDateFrom IS NULL)
			AND (a.STATUS_DOCUMENT_TYPE_ID = @StatusDocumentTypeId OR @StatusDocumentTypeId IS NULL)
			AND (A.CUSTOMER_ID = @CustomerId OR @CustomerId IS NULL)

	INSERT INTO @ShippingOrders
		 SELECT c.CUSTOMER_ORDER_DETAIL_ID, A.CUSTOMER_ORDER_SHIPMENT_ID ShipmentId, a.SHIPPING_DATE ShipmentDate, a.DELIVERY_NOTE DeliveryNote, a.TRACKING_NUMBER TrackingNumber, f.SHIPPING_METHOD_NAME ShipmentMethodName, 
	 			a.NOTES Notes, b.CUSTOMER_ORDER_SHIPMENT_ID ShipmentDetailId, e.INTERNAL_REFERENCE ShipmentDetailItemReference, e.ITEM_NAME ShipmentDetailItemName, 
	 			d.REFERENCE_CODE ShipmentDetailReferenceCode, d.REFERENCE_NAME ShipmentDetailReferenceName, b.DELIVERED_QUANTITY ShipmentDetailAmount
		   FROM customer_order_shipments a
		   JOIN customer_order_shipment_details b ON b.CUSTOMER_ORDER_SHIPMENT_ID = a.CUSTOMER_ORDER_SHIPMENT_ID
		   JOIN customer_order_details c ON c.CUSTOMER_ORDER_DETAIL_ID = b.CUSTOMER_ORDER_DETAIL_ID  
		   JOIN item_references d ON d.REFERENCE_ID = c.REFERENCE_ID
		   JOIN items e ON e.ITEM_ID = d.ITEM_ID
		   JOIN shipping_methods f ON f.SHIPPING_METHOD_ID = a.SHIPPING_METHOD_ID 
		  WHERE EXISTS (SELECT 1 FROM @CustomerOrders co WHERE co.OrderId = a.CUSTOMER_ORDER_ID)
		  
	SELECT a.CustomerId, a.CustomerName, a.Phone, a.Fax, a.OrderId, a.OrderNumber, a.OrderCreationDate, a.OrderDate, a.EstimatedDeliveryDate, a.OrderStatus, a.InternalNotes, a.CustomerNotes, a.OrderDetailId, 
		   a.OrderDetailItemReference, a.OrderDetailItemName, a.OrderDetailReferenceCode, a.OrderDetailReferenceName, a.OrderDetailAmount, a.DeliveredAmount, a.InProcessAmount, a.DetailStatus, 
		   b.ShipmentId ShipmentId, b.ShipmentDate ShipmentDate, b.DeliveryNote DeliveryNote, b.TrackingNumber TrackingNumber, 
		   b.ShipmentMethodName ShipmentMethodName, b.Notes Notes, b.ShipmentDetailId ShipmentDetailId, b.ShipmentDetailItemReference ShipmentDetailItemReference, 
		   b.ShipmentDetailItemName ShipmentDetailItemName, b.ShipmentDetailReferenceCode ShipmentDetailReferenceCode, b.ShipmentDetailReferenceName ShipmentDetailReferenceName, 
		   b.ShipmentDetailAmount ShipmentDetailAmount
	  FROM @CustomerOrders a
	  LEFT OUTER JOIN @ShippingOrders b ON b.CustomerOrderDetailId = a.OrderDetailId	 

END 
GO

CREATE OR ALTER PROCEDURE SP_GET_CUSTOMER_RESERVATION_REPORT
	@ReservationNumber VARCHAR(10) = NULL,
	@CreationDateFrom DATE = NULL,
	@CreationDateTo DATE = NULL,
	@ReservationDateFrom DATE = NULL,
	@ReservationDateTo DATE = NULL,
	@StatusDocumentTypeId SMALLINT = NULL,
    @CustomerId INT = NULL,
	@ReferenceIds VARCHAR(MAX) = ''
AS 
BEGIN 

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references

	SELECT a.CUSTOMER_ID CustomerId, a.CUSTOMER_NAME CustomerName, (ISNULL(a.CELL_PHONE+', ','')+ISNULL(a.PHONE2+', ','')+ISNULL(a.PHONE1,'')) Phone, a.FAX Fax,
	       b.CUSTOMER_RESERVATION_ID ReservationId, b.RESERVATION_NUMBER ReservationNumber, b.CREATION_DATE CreationDate, b.RESERVATION_DATE ReservationDate, b.EXPIRATION_DATE ExpirationDate, c.STATUS_DOCUMENT_TYPE_NAME Status, ISNULL(b.NOTES,'') Notes,
		   f.ITEM_ID ItemId, f.INTERNAL_REFERENCE InternalReference, f.ITEM_NAME ItemName, e.REFERENCE_CODE ReferenceCode, e.REFERENCE_NAME ReferenceName, d.RESERVED_QUANTITY Amount
	  FROM Customers a
	  JOIN customer_reservations b on b.CUSTOMER_ID = a.CUSTOMER_ID
	  JOIN status_document_types c ON c.STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID 
	  JOIN customer_reservation_details d ON d.CUSTOMER_RESERVATION_ID = b.CUSTOMER_RESERVATION_ID
	  JOIN item_references e ON e.REFERENCE_ID = d.REFERENCE_ID
	  JOIN items f ON f.ITEM_ID = e.ITEM_ID
	 WHERE EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = e.REFERENCE_ID)
       AND (b.RESERVATION_NUMBER LIKE '%'+@ReservationNumber+'%' OR @ReservationNumber IS NULL)
       AND (b.CREATION_DATE BETWEEN @CreationDateFrom AND @CreationDateTo OR @CreationDateFrom IS NULL)
       AND (b.RESERVATION_DATE BETWEEN @ReservationDateFrom AND @ReservationDateTo OR @ReservationDateFrom IS NULL)
       AND (b.STATUS_DOCUMENT_TYPE_ID = @StatusDocumentTypeId OR @StatusDocumentTypeId IS NULL)
	   AND (a.CUSTOMER_ID = @CustomerId OR @CustomerId IS NULL)
END 
GO

CREATE OR ALTER PROCEDURE SP_GET_ORDER_SHIPMENT_REPORT
	@OrderNumber VARCHAR(10) = NULL,
	@CreationDateFrom DATE = NULL,
	@CreationDateTo DATE = NULL,
	@RequestDateFrom DATE = NULL,
	@RequestDateTo DATE = NULL,
	@ExpectedReceiptDateFrom DATE = NULL,
	@ExpectedReceiptDateTo DATE = NULL,	
	@ReferenceIds VARCHAR(MAX) = '',
	@ImportNumber VARCHAR(30) = NULL,
 	@EmbarkationPort VARCHAR(30) = NULL,
 	@ProformaNumber VARCHAR(30) = NULL,
 	@ProviderId INT = NULL,
 	@ForwarderId INT = NULL,
 	@ForwarderAgentId INT = NULL,
 	@ShipmentMethodId INT = NULL,
 	@WarehouseId INT = NULL
AS 
BEGIN 

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references

	SELECT a.PURCHASE_ORDER_ID OrderId, a.ORDER_NUMBER OrderNumber, a.CREATION_DATE CreationDate, a.REQUEST_DATE RequestDate, a.EXPECTED_RECEIPT_DATE ExpectedReceiptDate, c.PROVIDER_NAME ProviderName,  
	       a.IMPORT_NUMBER ImportNumber, e.SHIPMENT_METHOD_NAME ShipmentMethodName, a.EMBARKATION_PORT EmbarkationPort, a.PROFORMA_NUMBER ProformaNumber, g.FORWARDER_NAME ForwarderName, 
		   (ISNULL(g.PHONE2+', ','')+ISNULL(g.PHONE1,'')) ForwarderPhone, g.FAX ForwarderFax, SUBSTRING(RTRIM((ISNULL(g.MAIL1+', ','')+ISNULL(g.MAIL2+', ',''))),1,LEN(RTRIM((ISNULL(g.MAIL1+', ','')+ISNULL(g.MAIL2+', ',''))))-1) ForwarderEmail,
		   f.FORWARDER_AGENT_NAME ForwarderAgentName, (ISNULL(f.PHONE2+', ','')+ISNULL(f.PHONE1,'')) AgentPhone, f.FAX AgentFax, 
		   SUBSTRING(RTRIM((ISNULL(f.EMAIL1+', ','')+ISNULL(f.EMAIL2+', ',''))),1,LEN(RTRIM((ISNULL(g.MAIL1+', ','')+ISNULL(g.MAIL2+', ',''))))-1) AgentEmail, 
		   i.WAREHOUSE_ID WarehouseId, i.WAREHOUSE_NAME WarehouseName, l.LINE_ID LineId, l.LINE_CODE LineCode, l.LINE_NAME LineName, k.ITEM_ID ItemId, k.ITEM_NAME ItemName, k.INTERNAL_REFERENCE InternalReference, 
		   j.REFERENCE_CODE ReferenceCode, j.REFERENCE_NAME ReferenceName, h.REQUESTED_QUANTITY Amount, k.WEIGHT * h.REQUESTED_QUANTITY Weight, k.VOLUME * h.REQUESTED_QUANTITY Volume
	  FROM purchase_orders a
	  JOIN status_document_types b ON b.STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID
	  JOIN providers c ON c.PROVIDER_ID = a.PROVIDER_ID
	  JOIN shipment_forwarder_agent_methods d ON d.SHIPMENT_FORWARDER_AGENT_METHOD_ID = a.SHIPMENT_FORWARDER_AGENT_METHOD_ID
      JOIN shipment_methods e ON e.SHIPMENT_METHOD_ID = d.SHIPMENT_METHOD_ID
	  JOIN forwarder_agents f ON f.FORWARDER_AGENT_ID = a.FORWARDER_AGENT_ID
	  JOIN forwarders g ON g.FORWARDER_ID = f.FORWARDER_ID
	  JOIN purchase_order_details h ON h.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
	  JOIN warehouses i ON i.WAREHOUSE_ID = h.WAREHOUSE_ID
	  JOIN item_references j ON j.REFERENCE_ID = h.REFERENCE_ID
	  JOIN items k ON k.ITEM_ID = j.ITEM_ID
	  JOIN lines l ON l.LINE_ID = k.LINE_ID
     WHERE b.STATUS_ORDER = 1
	   AND EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = j.REFERENCE_ID)
	   AND (a.CREATION_DATE BETWEEN @CreationDateFrom AND @CreationDateTo OR @CreationDateFrom IS NULL)
	   AND (a.REQUEST_DATE BETWEEN @RequestDateFrom AND @RequestDateTo OR @RequestDateFrom IS NULL)
	   AND (a.EXPECTED_RECEIPT_DATE BETWEEN @ExpectedReceiptDateFrom AND @ExpectedReceiptDateTo OR @ExpectedReceiptDateFrom IS NULL)
	   AND (a.IMPORT_NUMBER LIKE '%'+@ImportNumber+'%' OR @ImportNumber IS NULL)
 	   AND (a.EMBARKATION_PORT LIKE '%'+@EmbarkationPort+'%' or @EmbarkationPort IS NULL)
 	   AND (a.PROFORMA_NUMBER LIKE '%'+@ProformaNumber+'%' OR @ProformaNumber IS NULL)
 	   AND (a.PROVIDER_ID = @ProviderId OR @ProviderId IS NULL)
 	   AND (g.FORWARDER_ID = @ForwarderId OR @ForwarderId IS NULL)
 	   AND (a.FORWARDER_AGENT_ID = @ForwarderAgentId OR @ForwarderAgentId IS NULL)
 	   AND (e.SHIPMENT_METHOD_ID = @ShipmentMethodId OR @ShipmentMethodId IS NULL)
 	   AND (i.WAREHOUSE_ID = @WarehouseId OR @WarehouseId IS NULL)
	   AND (a.ORDER_NUMBER LIKE '%'+@OrderNumber+'%' OR @OrderNumber IS NULL)
END 
GO

CREATE OR ALTER PROCEDURE SP_GET_CUSTOMER_ORDER_ACTIVITY_REPORT
	@OrderNumber VARCHAR(10) = NULL,
	@CreationDateFrom DATE = NULL,
	@CreationDateTo DATE = NULL,
	@OrderDateFrom DATE = NULL,
	@OrderDateTo DATE = NULL,
	@EstimatedDeliveryDateFrom DATE = NULL,
	@EstimatedDeliveryDateTo DATE = NULL,
	@StatusDocumentTypeId SMALLINT = NULL,
    @CustomerId INT = NULL,
	@ReferenceIds VARCHAR(MAX) = ''
AS
BEGIN		
	DECLARE @FinishedStatus TABLE (STATUS_DOCUMENT_TYPE_ID INT)
	
	INSERT INTO @FinishedStatus
		 SELECT STATUS_DOCUMENT_TYPE_ID
		   FROM status_document_types a
		   JOIN document_types b ON b.DOCUMENT_TYPE_ID = a.DOCUMENT_TYPE_ID
		  WHERE DOCUMENT_TYPE_CODE = 'P' AND STATUS_ORDER IN (5,6)

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references
	
	DECLARE @Activities TABLE 
	(
		CustomerOrderId INT, 
		ActivityId INT, 
		CreationDateActivity DATE, 
		AreaName VARCHAR(30), 
		EmployeeName VARCHAR(100), 
		Notes VARCHAR(255), 
		ActivityType VARCHAR(30), 
		EmployeNameDetail VARCHAR(100)
	)
	
	DECLARE @CustomerOrders TABLE 
	(
		CustomerId INT, 
		CustomerName VARCHAR(50), 
		Phone VARCHAR(55), 
		Fax VARCHAR(25),
		OrderId INT, 
		OrderNumber VARCHAR(10), 
		CreationDate DATE, 
		OrderDate DATE, 
		EstimatedDeliveryDate DATE, 
		StatusOrder VARCHAR(30),
		InternalNotes VARCHAR(255), 
		CustomerNotes VARCHAR(255), 
		ReferenceId INT, 
		ItemReference VARCHAR(30), 
		ItemName VARCHAR(30), 
		ReferenceCode VARCHAR(30), 
		ReferenceName VARCHAR(30),
		Amount INT, 
		DeliveredAmount INT, 
		InProcessAmount INT, 
		StatusDetail VARCHAR(30)
	)

	INSERT INTO @CustomerOrders
	     SELECT a.CUSTOMER_ID CustomerId, a.CUSTOMER_NAME CustomerName, (ISNULL(a.CELL_PHONE+', ','')+ISNULL(a.PHONE2+', ','')+ISNULL(a.PHONE1,'')) Phone, a.FAX Fax,
	     	    b.CUSTOMER_ORDER_ID OrderId, b.ORDER_NUMBER OrderNumber, b.CREATION_DATE CreationDate, b.ORDER_DATE OrderDate, b.ESTIMATED_DELIVERY_DATE EstimatedDeliveryDate, c.STATUS_DOCUMENT_TYPE_NAME StatusOrder,
	     	    b.INTERNAL_NOTES InternalNotes, b.CUSTOMER_NOTES CustomerNotes, e.REFERENCE_ID, f.INTERNAL_REFERENCE ItemReference, f.ITEM_NAME ItemName, e.REFERENCE_CODE ReferenceCode, e.REFERENCE_NAME ReferenceName,
	     	    d.REQUESTED_QUANTITY Amount, d.DELIVERED_QUANTITY DeliveredAmount, d.PROCESSED_QUANTITY InProcessAmount, 
	     	    CASE 
	     			WHEN EXISTS (SELECT 1 FROM @FinishedStatus WHERE STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID) THEN 
	     				c.STATUS_DOCUMENT_TYPE_NAME
	     	 		WHEN d.DELIVERED_QUANTITY = 0 and d.PROCESSED_QUANTITY = 0 THEN 
	     				'Pendiente'
	     			WHEN d.DELIVERED_QUANTITY = d.REQUESTED_QUANTITY THEN 
	     				'Totalmente atendido'
	     			ELSE	
	     				'Parcialmente atendido'
	     		END StatusDetail
	       FROM customers a
	       JOIN customer_orders b ON b.CUSTOMER_ID = a.CUSTOMER_ID
	       JOIN status_document_types c ON c.STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID
	       JOIN customer_order_details d ON d.CUSTOMER_ORDER_ID = b.CUSTOMER_ORDER_ID
	       JOIN item_references e ON e.REFERENCE_ID = d.REFERENCE_ID
	       JOIN items f ON f.ITEM_ID = e.ITEM_ID
		  WHERE EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = e.REFERENCE_ID)
		    AND (b.ORDER_NUMBER LIKE '%'+@OrderNumber+'%' OR @OrderNumber IS NULL)
			AND (b.CREATION_DATE BETWEEN @CreationDateFrom AND @CreationDateTo OR @CreationDateFrom IS NULL)
			AND (b.ORDER_DATE BETWEEN @OrderDateFrom AND @OrderDateTo OR @OrderDateFrom IS NULL)
			AND (b.ESTIMATED_DELIVERY_DATE BETWEEN @EstimatedDeliveryDateFrom AND @EstimatedDeliveryDateTo OR @EstimatedDeliveryDateFrom IS NULL)
			AND (b.STATUS_DOCUMENT_TYPE_ID = @StatusDocumentTypeId OR @StatusDocumentTypeId IS NULL)
			AND (a.CUSTOMER_ID = @CustomerId OR @CustomerId IS NULL)
					   
	INSERT INTO @Activities 
		 SELECT g.CUSTOMER_ORDER_ID CustomerOrderId, g.CUSTOMER_ORDER_ACTIVITY_ID ActivityId, g.ACTIVITY_DATE CreationDateActivity, i.AREA_NAME AreaName, j.FULL_NAME EmployeeName, g.NOTES Notes, 
			    k.ACTIVITY_TYPE_NAME ActivityType, l.FULL_NAME EmployeNameDetail
		   FROM customer_order_activities g 
		   JOIN areas i ON i.AREA_ID = g.AREA_ID
	       JOIN employees j ON j.EMPLOYEE_ID = g.EMPLOYEE_ID
		   LEFT JOIN customer_order_activity_details h ON h.CUSTOMER_ORDER_ACTIVITY_ID = g.CUSTOMER_ORDER_ACTIVITY_ID
	       LEFT JOIN activity_types k ON k.ACTIVITY_TYPE_ID = h.ACTIVITY_TYPE_ID
		   LEFT JOIN employees l ON l.EMPLOYEE_ID = h.ACTIVITY_EMPLOYEE_ID
          WHERE EXISTS (SELECT 1 FROM @CustomerOrders co WHERE co.OrderId = g.CUSTOMER_ORDER_ID)	       
		  
	SELECT a.CustomerId, a.CustomerName, a.Phone, Fax, a.OrderId, a.OrderNumber, a.CreationDate, a.OrderDate, a.EstimatedDeliveryDate, a.StatusOrder, a.InternalNotes, a.CustomerNotes, 
		   a.ReferenceId, a.ItemReference, a.ItemName, a.ReferenceCode, a.ReferenceName, a.Amount, a.DeliveredAmount, a.InProcessAmount, a.StatusDetail, b.ActivityId, b.CreationDateActivity, 
		   b.AreaName, b.EmployeeName, b.Notes, b.ActivityType, b.EmployeNameDetail
	  FROM @CustomerOrders a
	  LEFT JOIN @Activities b ON b.CustomerOrderId = a.OrderId	
END
GO

CREATE OR ALTER PROCEDURE SP_GET_WAREHOUSE_TRANSFER_REPORT
	@TargetWarehouseId SMALLINT = NULL,
    @SourceWarehouseId SMALLINT = NULL,
	@AdjustmentDateFrom DATE = NULL, 
	@AdjustmentDateTo DATE = NULL,
	@NationalizationNumber VARCHAR(30) = NULL,
	@StatusId INT = NULL,
	@ReferenceIds VARCHAR(MAX) = ''	
AS
BEGIN

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references

	SELECT a.WAREHOUSE_TRANSFER_ID TransferId, a.TRANSFER_DATE Date, b.WAREHOUSE_NAME SourceWarehouseName, c.WAREHOUSE_NAME TargetWarehouseName, a.CREATION_DATE RegistrationDate, a.NATIONALIZATION NationalizationNumber,
		   e.REFERENCE_ID ReferenceId, f.INTERNAL_REFERENCE ItemReference, f.ITEM_NAME ItemName, e.REFERENCE_CODE ReferenceCode, e.REFERENCE_NAME ReferenceName, d.QUANTITY Amount, g.STATUS_DOCUMENT_TYPE_NAME TransferStatus	
	  FROM warehouse_transfers a
	  JOIN warehouses b ON b.WAREHOUSE_ID = a.ORIGIN_WAREHOUSE_ID
	  JOIN warehouses c ON c.WAREHOUSE_ID = a.DESTINATION_WAREHOUSE_ID
	  JOIN warehouse_transfer_details d ON d.WAREHOUSE_TRANSFER_ID = a.WAREHOUSE_TRANSFER_ID
	  JOIN item_references e ON e.REFERENCE_ID = d.REFERENCE_ID
	  JOIN items f ON f.ITEM_ID = e.ITEM_ID
	  JOIN status_document_types g ON g.STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID	  
	 WHERE EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = e.REFERENCE_ID)
	   AND (c.WAREHOUSE_ID = @TargetWarehouseId OR @TargetWarehouseId IS NULL)
	   AND (b.WAREHOUSE_ID = @SourceWarehouseId OR @SourceWarehouseId IS NULL)
	   AND (a.TRANSFER_DATE BETWEEN @AdjustmentDateFrom AND @AdjustmentDateTo OR @AdjustmentDateFrom IS NULL)
	   AND (a.NATIONALIZATION = @NationalizationNumber OR @NationalizationNumber IS NULL)
	   AND (a.STATUS_DOCUMENT_TYPE_ID = @StatusId OR @StatusId IS NULL)
END
GO

CREATE OR ALTER PROCEDURE SP_GET_FREEZONE_VS_AVAILABLE_REPORT	
	@ReferenceIds VARCHAR(MAX)	
AS
BEGIN

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references

	SELECT c.LINE_ID LineId, c.LINE_CODE LineCode, c.LINE_NAME LineName, b.ITEM_ID ItemId, b.INTERNAL_REFERENCE InternalReference, b.ITEM_NAME ItemName,
	       a.REFERENCE_ID ReferenceId, a.REFERENCE_CODE ReferenceCode, a.REFERENCE_NAME ReferenceName, a.INVENTORY_QUANTITY-a.RESERVED_QUANTITY-a.ORDERED_QUANTITY AvailableAmount,
		   d.QUANTITY FreeZone
	  FROM item_references a
	  JOIN items b ON b.ITEM_ID = a.ITEM_ID
	  JOIN lines c ON c.LINE_ID = b.LINE_ID
	  JOIN references_warehouse d ON d.REFERENCE_ID = a.REFERENCE_ID
	  JOIN warehouses e ON e.WAREHOUSE_ID = d.WAREHOUSE_ID and e.WAREHOUSE_CODE = 2
	 WHERE EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = a.REFERENCE_ID)
END
GO

CREATE OR ALTER PROCEDURE SP_GET_CUSTOMER_SALES_REPORT	
	@OrderNumber VARCHAR(10) = NULL,
	@CreationDateFrom DATE = NULL,
	@CreationDateTo DATE = NULL,
	@OrderDateFrom DATE = NULL,
	@OrderDateTo DATE = NULL,
	@EstimatedDeliveryDateFrom DATE = NULL,
	@EstimatedDeliveryDateTo DATE = NULL,
	@StatusDocumentTypeId SMALLINT = NULL,
    @CustomerId INT = NULL,
	@ReferenceIds VARCHAR(MAX) = ''	
AS
BEGIN

	DECLARE @FinishedStatus TABLE (STATUS_DOCUMENT_TYPE_ID INT)
	
	INSERT INTO @FinishedStatus
		 SELECT STATUS_DOCUMENT_TYPE_ID
		   FROM status_document_types a
		   JOIN document_types b ON b.DOCUMENT_TYPE_ID = a.DOCUMENT_TYPE_ID
		  WHERE DOCUMENT_TYPE_CODE = 'P' AND STATUS_ORDER IN (5,6)

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references

	DECLARE @CustomerOrders TABLE 
		( CustomerId INT, 
		  CustomerName VARCHAR(50), 
		  Phone VARCHAR(70), 
		  Fax VARCHAR(20),
		  OrderId INT, 
		  OrderNumber VARCHAR(20), 
		  OrderCreationDate DATE, 
		  OrderDate DATE, 
		  EstimatedDeliveryDate DATE, 
		  OrderStatus VARCHAR(30), 
		  InternalNotes VARCHAR(250), 
		  CustomerNotes VARCHAR(250), 
		  OrderDetailId INT,
		  OrderDetailItemReference VARCHAR(30), 
		  OrderDetailItemName VARCHAR(30), 
		  OrderDetailReferenceCode VARCHAR(30), 
		  OrderDetailReferenceName VARCHAR(30),
		  OrderDetailAmount INT, 
		  DeliveredAmount INT, 
		  InProcessAmount INT, 
		  DetailStatus VARCHAR(30))

	DECLARE @ShippingOrders TABLE
		( CustomerOrderDetailId INT, 
		  ShipmentId INT, 
		  ShipmentDate DATE, 
		  DeliveryNote VARCHAR(30), 
		  TrackingNumber VARCHAR(30), 
		  ShipmentMethodName VARCHAR(30), 
		  Notes VARCHAR(250), 
		  ShipmentDetailId INT, 
		  ShipmentDetailItemReference VARCHAR(30), 
		  ShipmentDetailItemName VARCHAR(30), 
		  ShipmentDetailReferenceCode VARCHAR(30), 
		  ShipmentDetailReferenceName VARCHAR(30), 
		  ShipmentDetailAmount INT)

	INSERT INTO @CustomerOrders
		 SELECT b.CUSTOMER_ID CustomerId, b.CUSTOMER_NAME CustomerName, (ISNULL(b.CELL_PHONE+', ','')+ISNULL(b.PHONE2+', ','')+ISNULL(b.PHONE1,'')) Phone, b.FAX Fax,
	 			a.CUSTOMER_ORDER_ID OrderId, a.ORDER_NUMBER OrderNumber, a.CREATION_DATE OrderCreationDate, a.ORDER_DATE OrderDate, a.ESTIMATED_DELIVERY_DATE EstimatedDeliveryDate, 
				c.STATUS_DOCUMENT_TYPE_NAME OrderStatus, a.INTERNAL_NOTES InternalNotes, a.CUSTOMER_NOTES CustomerNotes, D.CUSTOMER_ORDER_DETAIL_ID OrderDetailId,
				f.INTERNAL_REFERENCE OrderDetailItemReference, f.ITEM_NAME OrderDetailItemName, e.REFERENCE_CODE OrderDetailReferenceCode, e.REFERENCE_NAME OrderDetailReferenceName,
				d.REQUESTED_QUANTITY OrderDetailAmount, d.DELIVERED_QUANTITY DeliveredAmount, d.PROCESSED_QUANTITY InProcessAmount, 
				CASE 
					WHEN EXISTS (SELECT 1 FROM @FinishedStatus WHERE STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID) THEN 
						c.STATUS_DOCUMENT_TYPE_NAME
			 		WHEN d.DELIVERED_QUANTITY = 0 and d.PROCESSED_QUANTITY = 0 THEN 
					 'Pendiente'
					WHEN d.DELIVERED_QUANTITY = d.REQUESTED_QUANTITY THEN 
					 'Totalmente atendido'
					ELSE	
					 'Parcialmente atendido'
				END DetailStatus 
		   FROM customer_orders a
		   JOIN customers b ON b.CUSTOMER_ID = a.CUSTOMER_ID 
		   JOIN status_document_types c ON c.STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID
		   JOIN customer_order_details d ON d.CUSTOMER_ORDER_ID = a.CUSTOMER_ORDER_ID
		   JOIN item_references e ON e.REFERENCE_ID = d.REFERENCE_ID
		   JOIN items f ON f.ITEM_ID = e.ITEM_ID
		  WHERE EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = e.REFERENCE_ID)
		    AND (a.ORDER_NUMBER LIKE '%'+@OrderNumber+'%' OR @OrderNumber IS NULL)
			AND (a.CREATION_DATE BETWEEN @CreationDateFrom AND @CreationDateTo OR @CreationDateFrom IS NULL)
			AND (a.ORDER_DATE BETWEEN @OrderDateFrom AND @OrderDateTo OR @OrderDateFrom IS NULL)
			AND (a.ESTIMATED_DELIVERY_DATE BETWEEN @EstimatedDeliveryDateFrom AND @EstimatedDeliveryDateTo OR @EstimatedDeliveryDateFrom IS NULL)
			AND (a.STATUS_DOCUMENT_TYPE_ID = @StatusDocumentTypeId OR @StatusDocumentTypeId IS NULL)
			AND (A.CUSTOMER_ID = @CustomerId OR @CustomerId IS NULL)

	INSERT INTO @ShippingOrders
		 SELECT c.CUSTOMER_ORDER_DETAIL_ID, A.CUSTOMER_ORDER_SHIPMENT_ID ShipmentId, a.SHIPPING_DATE ShipmentDate, a.DELIVERY_NOTE DeliveryNote, a.TRACKING_NUMBER TrackingNumber, f.SHIPPING_METHOD_NAME ShipmentMethodName, 
	 			a.NOTES Notes, b.CUSTOMER_ORDER_SHIPMENT_ID ShipmentDetailId, e.INTERNAL_REFERENCE ShipmentDetailItemReference, e.ITEM_NAME ShipmentDetailItemName, 
	 			d.REFERENCE_CODE ShipmentDetailReferenceCode, d.REFERENCE_NAME ShipmentDetailReferenceName, b.DELIVERED_QUANTITY ShipmentDetailAmount
		   FROM customer_order_shipments a
		   JOIN customer_order_shipment_details b ON b.CUSTOMER_ORDER_SHIPMENT_ID = a.CUSTOMER_ORDER_SHIPMENT_ID
		   JOIN customer_order_details c ON c.CUSTOMER_ORDER_DETAIL_ID = b.CUSTOMER_ORDER_DETAIL_ID  
		   JOIN item_references d ON d.REFERENCE_ID = c.REFERENCE_ID
		   JOIN items e ON e.ITEM_ID = d.ITEM_ID
		   JOIN shipping_methods f ON f.SHIPPING_METHOD_ID = a.SHIPPING_METHOD_ID 
		  WHERE EXISTS (SELECT 1 FROM @CustomerOrders co WHERE co.OrderId = a.CUSTOMER_ORDER_ID)
		  
	SELECT a.CustomerId, a.CustomerName, a.Phone, a.Fax, 
		   a.OrderId CustomerOrderId, a.OrderNumber, a.OrderCreationDate CreationDate, a.OrderDate, a.EstimatedDeliveryDate, a.OrderStatus Status, a.InternalNotes, a.OrderDetailId, 
		   a.OrderDetailItemReference ItemReference, a.OrderDetailItemName ItemName, a.OrderDetailReferenceCode ReferenceCode, a.OrderDetailReferenceName ReferenceName, 
		   a.OrderDetailAmount Amount, a.DeliveredAmount, b.ShipmentId, b.ShipmentDate, b.DeliveryNote, b.TrackingNumber, b.ShipmentMethodName, b.Notes, 
		   b.ShipmentDetailId ShipmentDetailId, b.ShipmentDetailItemReference ShipmentItemReference, b.ShipmentDetailItemName ShipmentItemName, b.ShipmentDetailReferenceCode ShipmentReferenceCode, 
		   b.ShipmentDetailReferenceName ShipmentReferenceName, b.ShipmentDetailAmount ShipmentAmount
	  FROM @CustomerOrders a
	  LEFT OUTER JOIN @ShippingOrders b ON b.CustomerOrderDetailId = a.OrderDetailId	
END
GO

CREATE OR ALTER PROCEDURE SP_GET_CUSTOMER_ORDER_EXPORT
	@OrderNumber VARCHAR(10) = NULL,
	@CreationDateFrom DATE = NULL,
	@CreationDateTo DATE = NULL,
	@OrderDateFrom DATE = NULL,
	@OrderDateTo DATE = NULL,
	@EstimatedDeliveryDateFrom DATE = NULL,
	@EstimatedDeliveryDateTo DATE = NULL,
	@StatusDocumentTypeId SMALLINT = NULL,
    @CustomerId INT = NULL,
	@ReferenceIds VARCHAR(MAX) = ''	
AS
BEGIN
	DECLARE @FinishedStatus TABLE (STATUS_DOCUMENT_TYPE_ID INT)
	
	INSERT INTO @FinishedStatus
		 SELECT STATUS_DOCUMENT_TYPE_ID
		   FROM status_document_types a
		   JOIN document_types b ON b.DOCUMENT_TYPE_ID = a.DOCUMENT_TYPE_ID
		  WHERE DOCUMENT_TYPE_CODE = 'P' AND STATUS_ORDER IN (5,6)

	DECLARE @FilterReferences TABLE (ReferenceId INT)
	
	IF LEN(RTRIM(@ReferenceIds)) > 0
		INSERT INTO @FilterReferences
			 SELECT value FROM STRING_SPLIT(@ReferenceIds,',')
	ELSE
		INSERT INTO @FilterReferences
			 SELECT REFERENCE_ID 
			   FROM item_references
			   			   
	SELECT a.ORDER_NUMBER OrderNumber, b.CUSTOMER_NAME CustomerName, b.IDENTITY_NUMBER IdentityNumber, 
		   (ISNULL(b.CELL_PHONE+', ','')+ISNULL(b.PHONE2+', ','')+ISNULL(b.PHONE1,'')) Phone,
		   c.CITY_NAME CityName, a.ORDER_DATE OrderDate, f.ITEM_NAME ItemName, f.INTERNAL_REFERENCE ItemCode, e.REFERENCE_NAME ReferenceName, e.REFERENCE_CODE ReferenceCode,
		   d.REQUESTED_QUANTITY Amount, d.DELIVERED_QUANTITY DeliveredAmount,  d.REQUESTED_QUANTITY - d.DELIVERED_QUANTITY - d.PROCESSED_QUANTITY PendingAmount, d.PROCESSED_QUANTITY ProcessedAmount,
		   a.ESTIMATED_DELIVERY_DATE EstimatedDeliveryDate, a.INTERNAL_NOTES InternalNotes, a.CUSTOMER_NOTES CustomerNotes,
		   g.DELIVERY_NOTE DeliveriNote, g.SHIPPING_DATE ShippingDate, g.NOTES ShippingNotes, 
		   CASE 
				WHEN EXISTS (SELECT 1 FROM @FinishedStatus WHERE STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID) THEN 
					h.STATUS_DOCUMENT_TYPE_NAME
				WHEN d.DELIVERED_QUANTITY = 0 and d.PROCESSED_QUANTITY = 0 THEN 
					'Pendiente'
				WHEN d.DELIVERED_QUANTITY = d.REQUESTED_QUANTITY THEN 
					'Totalmente atendido'
				ELSE	
					'Parcialmente atendido'
			END Status
	  FROM customer_orders a
	  JOIN customers b ON b.CUSTOMER_ID = a.CUSTOMER_ID
	  JOIN cities c ON c.CITY_ID = b.CITY_ID
	  JOIN customer_order_details d ON d.CUSTOMER_ORDER_ID = a.CUSTOMER_ORDER_ID
	  JOIN item_references e ON e.REFERENCE_ID = d.REFERENCE_ID
	  JOIN items f ON f.ITEM_ID = e.ITEM_ID
	  LEFT JOIN customer_order_shipments g ON g.CUSTOMER_ORDER_ID = a.CUSTOMER_ORDER_ID
	  LEFT JOIN customer_order_shipment_details i ON i.CUSTOMER_ORDER_SHIPMENT_ID = g.CUSTOMER_ORDER_SHIPMENT_ID
												 AND i.CUSTOMER_ORDER_DETAIL_ID = d.CUSTOMER_ORDER_DETAIL_ID	
	  JOIN status_document_types h ON h.STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID
	 WHERE EXISTS (SELECT 1 FROM @FilterReferences fr WHERE fr.ReferenceId = e.REFERENCE_ID)
	   AND (a.ORDER_NUMBER LIKE '%'+@OrderNumber+'%' OR @OrderNumber IS NULL)
	   AND (a.CREATION_DATE BETWEEN @CreationDateFrom AND @CreationDateTo OR @CreationDateFrom IS NULL)
	   AND (a.ORDER_DATE BETWEEN @OrderDateFrom AND @OrderDateTo OR @OrderDateFrom IS NULL)
	   AND (a.ESTIMATED_DELIVERY_DATE BETWEEN @EstimatedDeliveryDateFrom AND @EstimatedDeliveryDateTo OR @EstimatedDeliveryDateFrom IS NULL)
	   AND (a.STATUS_DOCUMENT_TYPE_ID = @StatusDocumentTypeId OR @StatusDocumentTypeId IS NULL)
	   AND (A.CUSTOMER_ID = @CustomerId OR @CustomerId IS NULL)
END 
GO

